// Generated by CoffeeScript 1.4.0
(function() {
  var SR_Helper, SR_User_Controller, SR_User_Model,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SR_Helper = (function() {
    var $;

    $ = jQuery;

    function SR_Helper() {
      this.start_debugger();
    }

    SR_Helper.prototype.start_debugger = function() {
      if (this.check_parameter_exists('sr_debug')) {
        this.debug_mode = true;
        return console.log("***********************************************\n* Welcome to the Social Reader debug console! *\n***********************************************");
      } else {
        return this.debug_mode = false;
      }
    };

    SR_Helper.prototype.debug = function(message, indent) {
      if (indent == null) {
        indent = 1;
      }
      if (this.debug_mode === true) {
        if (indent === 1) {
          return console.log("  * " + message);
        } else if (indent === 0) {
          return console.log("\n" + message + ":");
        }
      } else {

      }
    };

    SR_Helper.prototype.check_parameter_exists = function(parameter) {
      var currentParameter, fullQString, i, paramArray, paramCount, queryStringComplete;
      fullQString = window.location.search.substring(1);
      paramCount = 0;
      queryStringComplete = "?";
      if (fullQString.length > 0) {
        paramArray = fullQString.split("&");
        i = 0;
        while (i < paramArray.length) {
          currentParameter = paramArray[i].split("=");
          if (currentParameter[0] === parameter) {
            return true;
          }
          i++;
        }
      }
      return false;
    };

    SR_Helper.prototype.set_cookie = function(c_name, value, exdays) {
      var c_value, exdate;
      exdate = new Date();
      exdate.setDate(exdate.getDate() + exdays);
      c_value = escape(value) + (!(exdays != null) ? "" : "; expires=" + exdate.toUTCString());
      return document.cookie = c_name + "=" + c_value;
    };

    SR_Helper.prototype.get_cookie = function(c_name) {
      var ARRcookies, i, x, y;
      ARRcookies = document.cookie.split(";");
      i = 0;
      while (i < ARRcookies.length) {
        x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
        y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
        x = x.replace(/^\s+|\s+$/g, "");
        if (x === c_name) {
          return unescape(y);
        }
        i++;
      }
    };

    SR_Helper.prototype.check_cookie = function(c_name) {
      var cookie;
      cookie = this.get_cookie(c_name);
      if ((cookie != null) && cookie !== "") {
        return true;
      } else {
        return false;
      }
    };

    SR_Helper.prototype.remove_cookie = function(c_name) {
      return document.cookie = c_name + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
    };

    SR_Helper.prototype.relative_time = function(fb_time) {
      var elapsed, msPerDay, msPerHour, msPerMinute, msPerMonth, msPerYear, timestamp;
      timestamp = new Date(fb_time).getTime();
      msPerMinute = 60 * 1000;
      msPerHour = msPerMinute * 60;
      msPerDay = msPerHour * 24;
      msPerMonth = msPerDay * 30;
      msPerYear = msPerDay * 365;
      elapsed = new Date().getTime() - timestamp;
      if (elapsed < msPerMinute) {
        return Math.round(elapsed / 1000) + " seconds ago";
      } else if (elapsed < msPerHour) {
        return Math.round(elapsed / msPerMinute) + " minutes ago";
      } else if (elapsed < msPerDay) {
        return Math.round(elapsed / msPerHour) + " hours ago";
      } else if (elapsed < msPerMonth) {
        return Math.round(elapsed / msPerDay) + " days ago";
      } else if (elapsed < msPerYear) {
        return Math.round(elapsed / msPerMonth) + " months ago";
      } else {
        return Math.round(elapsed / msPerYear) + " years ago";
      }
    };

    return SR_Helper;

  })();

  SR_User_Model = (function() {
    var $;

    $ = jQuery;

    function SR_User_Model(cb1, cb2) {
      var _this = this;
      this.helper = new SR_Helper;
      this.site = {},
      this.user = {},
      this.friends = [],
      this.activity = {}

      this.get_client_details(function() {
        _this.fb_init(function() {
          if (_this.user.logged_in === true) {
            _this.fb_get_user(function() {
              cb1();
              if (_this.helper.check_cookie('sr_data_cached') === false) {
                _this.fb_get_friend_users(function() {
                  _this.fb_get_activity(function() {
                    cb2();
                  });
                });
              }
            });
          } else {
            return cb1();
          }
        });
      });
    }

    SR_User_Model.prototype.get_client_details = function(cb) {
      var _this = this;
      this.helper.debug('Getting client site details', 0);
      return $.post(_sr_ajax.ajaxurl, {
        action: "_sr_ajax_hook",
        type: "get_client_details"
      }, function(data) {
        _this.helper.debug('Ajax request complete');
        _this.site = JSON.parse(data);
        if (_this.site) {
          _this.helper.debug('Read from ajax request data: SUCCESS');
        } else {
          _this.helper.debug('Read from ajax request data: FAILURE');
        }
        _this.helper.debug('Finished');
        return cb();
      });  
    };

    SR_User_Model.prototype.fb_init = function(cb) {
      var _this = this;
      this.helper.debug('Initiliazing Facebook', 0);
      $('body').prepend('<div id="fb-root"></div>');
      this.helper.debug('Prepended div fb-root to body');
      window.fbAsyncInit = function() {
        _this.helper.debug("Loading the SDK asynchronously with app id: " + _this.site.fb_app_id);
        FB.init({
          appId: "" + _this.site.fb_app_id,
          channelUrl: "//localhost:8888/wordpress/channel.html",
          status: true,
          cookie: true,
          xfbml: true
        });
        _this.helper.debug('SDK loaded');
        _this.helper.debug('Finished');
        return _this.fb_is_logged_in(function() {
          cb();
        });
      };
      return (function(d, debug) {
        var id, js, ref;
        js = void 0;
        id = "facebook-jssdk";
        ref = d.getElementsByTagName("script")[0];
        if (d.getElementById(id)) {
          return;
        }
        js = d.createElement("script");
        js.id = id;
        js.async = true;
        js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
        return ref.parentNode.insertBefore(js, ref);
      })(window.document, false);
    };

    SR_User_Model.prototype.fb_is_logged_in = function(cb) {
      var _this = this;
      this.helper.debug('See if user is logged in to Facebook and the app', 0);
      this.helper.debug('Query Facebook');
      return FB.getLoginStatus(function(response) {
        _this.helper.debug('Response from Facebook received');
        if (response.status === 'connected') {
          _this.helper.debug('User is logged in');
          _this.user.logged_in = true;
          _this.helper.debug('Finished');
          return cb();
        } else {
          _this.helper.debug('User is not logged in');
          _this.user.logged_in = false;
          _this.helper.debug('Finished');
          return cb();
        }
      });
    };

    SR_User_Model.prototype.fb_get_user = function(cb) {
      var _this = this;
      this.helper.debug('Get Facebook user', 0);
      this.helper.debug('Querying Facebook');
      return FB.api('/me', function(me) {
        _this.helper.debug('Response received, setting values');
        _this.user.id = me.id;
        _this.user.name = me.name;
        _this.user.link = me.link;
        _this.user.picture = "//graph.facebook.com/" + me.id + "/picture";
        _this.is_auto_sharing(function() {
          _this.helper.debug('Finished');
          return cb();
        });
      });
    };

    SR_User_Model.prototype.is_auto_sharing = function(cb) {
      var _this = this;
      this.helper.debug("See if we're auto sharing");
      return $.post(_sr_ajax.ajaxurl, {
        action: "_sr_ajax_hook",
        type: "is_auto_sharing",
        fb_id: this.user.id
      }, function(data) {
        _this.helper.debug('Ajax request complete');
        if (data == 1 || data == 0) {
          _this.helper.debug('SUCCESS, set param');
          if (data == 1) {
            data = true;
          } else {
            data = false;
          }
          _this.user.auto_sharing = data;
        } else {
          _this.helper.debug('Data format is incorrect. FAILURE')
        }
        return cb();
      });
    }; 

    SR_User_Model.prototype.set_auto_sharing = function(bool, cb) {
      var _this = this;
      this.helper.debug('Setting auto sharing', 0);
      this.helper.debug("Changing auto sharing to " + bool);
      return $.post(_sr_ajax.ajaxurl, {
        action: "_sr_ajax_hook",
        type: "set_auto_sharing",
        fb_id: this.user.id,
        is_auto_sharing: bool
      }, function(data) {
        _this.helper.debug('Ajax request complete');
        if (data == 1) {
          _this.helper.debug('Auto sharing change: SUCCESS');
        } else {
          _this.helper.debug('Auto sharing change: FAILURE');
        }
        _this.helper.debug('Finished');
        if (cb != null) cb();
      });
    };

    SR_User_Model.prototype.fb_login = function(cb) {
      var _this = this;
      this.helper.debug('Logging in the user to Facebook', 0);
      return FB.login((function(response) {
        _this.helper.debug('Response received from Facebook');
        if (response.status === 'connected') {
          _this.helper.debug('Logged in successfully');
          return window.parent.location.reload();
        } else {
          return _this.helper.debug("User cancelled login or did not fully authorize.");
        }
      }), {
        scope: "publish_actions"
      });
    };

    SR_User_Model.prototype.fb_logout = function(cb) {
      var _this = this;
      this.helper.debug('Logging the user out of Facebook', 0);
      return FB.logout(function(response) {
        _this.helper.debug('Logout successful');
        _this.helper.debug('Removing cached coookie NEED TO DO THIS');
        _this.helper.debug('Reloading the page');
        return window.parent.location.reload();
      });
    };

    SR_User_Model.prototype.fb_add_read = function(cb) {
      var _this = this;
      this.helper.debug('Adding user read', 0);
      return FB.api("/me/news.reads?article=" + document.URL, "post", function(response) {
        _this.helper.debug('Response received from Facebook');
        if (response.id) {
          _this.helper.debug("Read " + response.id + " posted to Facebook: SUCCESS");
        } else {
          _this.helper.debug("Read posted to Facebook: FAILURE");
          _this.helper.debug("Error message from Facebook: " + response.error.message + " ");
        }
        _this.helper.debug('Finished');
        if (cb != null) {
          return cb();
        }
      });
    };

    SR_User_Model.prototype.fb_delete_read = function(id, cb) {
      var _this = this;
      this.helper.debug('Deleting user read', 0);
      return FB.api("/" + id, "delete", function(response) {
        _this.helper.debug('Response received from Facebook');
        if (response === true) {
          _this.helper.debug('Read deleted from Facebook: SUCCESS');
        } else {
          _this.helper.debug('Read deleted from Facebook: FAILURE');
          _this.helper.debug('Error message from Facebook: #{response.error.message}');
        }
        return cb();
      });
    };
  
    SR_User_Model.prototype.fb_get_friend_users = function(cb) {
      var _this = this;
      this.helper.debug('Get Facebook friends using the app', 0);
      if (this.helper.check_cookie('sr_friends_cache')) {
        this.helper.debug('Friends in cache, get from server');
        this.get_cache('friends_cache', function(response) {
          _this.friends = response;
          if (cb != null) cb();
        });
      } else {
        this.helper.debug('Friends not in cache, querying Facebook');
        return FB.api('/me/friends?fields=name,installed', function(response) {
          var friend, _i, _len, _ref;
          _this.helper.debug('Response received, finding friend users');
          _ref = response.data;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            friend = _ref[_i];
            if (friend.installed === true) {
              delete friend.installed;
              _this.friends.push(friend);
            }
          }
          _this.helper.debug("" + _this.friends.length + " friends found");
          _this.helper.debug('Finished');
          cb();
          _this.save_cache('friends_cache', _this.friends);
        });
      }
    };

    SR_User_Model.prototype.fb_get_activity = function(cb) {
      var batch_arr, user, _i, _len, _ref,
      _this = this;
      this.helper.debug('Getting activity of you and friends', 0);
      if (this.helper.check_cookie('sr_activity_cache')) {
        this.helper.debug('Activity in cache, get from server');
        this.get_cache('activity_cache', function(response) {

          _this.activity = response;
          _this.helper.debug('Finished');
          if (cb != null) cb();
        });
      } else {
        this.helper.debug('Activity reads does not exist, create and fetch from Facebook');
        this.activity.reads = [];
        this.helper.debug('Creating batch array');
        batch_arr = [];
        batch_arr.push({
          method: "GET",
          relative_url: "me/news.reads?fields=id,comment_info,comments,comment_info,likes,like_info,data,publish_time,from"
        });
        _ref = this.friends;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          batch_arr.push({
            method: "GET",
            relative_url: "" + user.id + "/news.reads?fields=id,comment_info,comments,comment_info,likes,like_info,data,publish_time,from"
          });
        }
        this.helper.debug("Starting batch requests for the " + this.friends.length + " friends using this app");
        return FB.api("/", "POST", {
          batch: batch_arr
        }, function(responses) {
          var body, read, response, _j, _k, _len1, _len2, _ref1;
          _this.helper.debug('Response received from Facebook');
          _this.helper.debug('Added reads to reads param array');
          for (_j = 0, _len1 = responses.length; _j < _len1; _j++) {
            response = responses[_j];
            if (!response || !response.body) continue;
            body = JSON.parse(response.body);
            _ref1 = body.data;
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              read = _ref1[_k];
              _this.activity.reads.push(read);
            }
          }
          _this.helper.debug('Sorting the reads by publish_time descending')
          _this.activity.reads = _this.activity.reads.sort(function(a, b) {
            a = new Date(a.publish_time);
            b = new Date(b.publish_time);
            return a>b ? -1 : a<b ? 1 : 0;
          });
          _this.helper.debug('Finished');
          cb();
          _this.save_cache('activity_cache', _this.activity);
        });
      }
    };


    SR_User_Model.prototype.save_cache = function(field, data, cb) {
      this.helper.debug('Saving '+field+' to the database cache', 0);
      var _this = this;
      var json = JSON.stringify(data);
      return $.post(_sr_ajax.ajaxurl, {
        action: "_sr_ajax_hook",
        type: "save_cache",
        fb_id: _this.user.id,
        field: field,
        data: json
      }, function(data) {
        _this.helper.debug('Ajax request complete');
        if (data == '1') {
          _this.helper.debug(field+' saved successfully');
          _this.helper.set_cookie('sr_'+field, 'true', null);
          _this.helper.debug('Set cookie marking '+field+' as saved this session');
          _this.helper.debug('Finished')
          if (cb != null) cb();
        } else {
          _this.helper.debug('Data failed to save');
          _this.helper.debug('Finished');
          if (cb != null) cb();
        }
      }); 
    };

    SR_User_Model.prototype.get_cache = function(field, cb) {
      var _this = this;
      this.helper.debug('Getting the '+field);
      return $.post(_sr_ajax.ajaxurl, {
        action: "_sr_ajax_hook",
        type: "get_cache",
        fb_id: _this.user.id,
        field: field,
      }, function(data) {
        _this.helper.debug('Ajax request complete');
        _this.helper.debug('Converting data to json object');
        try {
          var parsed = JSON.parse(data);
          _this.helper.debug('JSON parsed: SUCCESS');
          _this.helper.debug('Finished');
          if (cb != null) cb(parsed);
        }
        catch(e) {
          _this.helper.debug('JSON parsed: FAILURE');
          _this.helper.debug('Finished');
          if (cb != null) cb();
        }  
      });
    };



    return SR_User_Model;

  })();

  SR_User_Controller = (function() {
    var $;

    $ = jQuery;

    function SR_User_Controller(cb1, cb2) {
      var _this = this;
      this.model = new SR_User_Model(function() {
        _this.helper = _this.model.helper;
        return cb1();
      }, function() {
        return cb2();
      });
    }

    SR_User_Controller.prototype.load_sidebar = function() {
      var toggled_class,
        _this = this;
      if ($('#sr_sidebar_box').length === 0) {
        this.helper.debug('#sr_sidebar_box is not found, cannot load sidebar.');
        return false;
      }
      _this = this;
      this.helper.debug("Loading the sidebar", 0);
      if (window._sr.model.user.logged_in === true) {
        this.helper.debug("User is logged in");
        if (this.model.user.auto_sharing === true) {
          toggled_class = 'sr_sidebar_toggled_on';
        } else {
          toggled_class = 'sr_sidebar_toggled_off';
        }
        this.helper.debug("User auto-sharing is set to: " + this.model.user.auto_sharing);
        this.helper.debug('Putting html');
        $('#sr_sidebar_box').html("				<div id='sr_sidebar_logged_in'>								<a target='blank' href='" + this.model.user.link + "'>						<img src='" + this.model.user.picture + "' width='50' height='50' alt='" + this.model.user.name + "' />					</a>					<div id='sr_sidebar_right'>						<div id='sr_sidebar_name'><a target='blank' href='" + this.model.user.link + "'>" + this.model.user.name + "</a></div>						<div id='sr_sidebar_promo'>" + this.model.site.login_meta + "</div>						<div id='sr_sidebar_logout'><a>Logout</a></div>					</div>					<div class='clear'></div>					<div id='sr_sidebar_bottom'>						<div class='sr_sidebar_toggle " + toggled_class + "'>							<a title='Auto sharing to Facebook is enabled'>" + this.model.site.auto_sharing_on + "</a> 						</div>						<div id='sr_sidebar_activity'><a>" + this.model.site.activity + "</a></div>					</div>				</div>			");
        if ($('#sr_sidebar_box').html() !== '') {
          this.helper.debug("Html put: SUCCESS");
        } else {
          this.helper.debug("Html put: FAILURE");
        }
        this.helper.debug("Setup jQuery listener for toggle auto-sharing link click");
        $("#sr_sidebar_box .sr_sidebar_toggle").on("click", function() {
          if ($(this).attr('class').match(/sr_sidebar_toggled_on/)) {
            $(this).removeClass('sr_sidebar_toggled_on');
            $(this).addClass('sr_sidebar_toggled_off');
            return _this.model.set_auto_sharing(false);
          } else if ($(this).attr('class').match(/sr_sidebar_toggled_off/)) {
            $(this).removeClass('sr_sidebar_toggled_off');
            $(this).addClass('sr_sidebar_toggled_on');
            return _this.model.set_auto_sharing(true);
          }
        });
        this.helper.debug("Setup jQuery listener activity link click");
        $("#sr_sidebar_box #sr_sidebar_activity").on("click", function() {
          return _this.show_lightbox('all_activity');
        });
        this.helper.debug('Setup jQuery listener for logout link click');
        $('#sr_sidebar_box #sr_sidebar_logout').on("click", function() {
          return _this.model.fb_logout();
        });
        return this.helper.debug('Finished');
      } else {
        this.helper.debug('User is not logged in, show login button');
        this.helper.debug('Putting html');
        $('#sr_sidebar_box').html("				<div id='sr_sidebar_logged_out'>								Login and read with your friends					<a id='sr_sidebar_login'><img src='" + this.model.site.plugin_url + "/images/facebooklogin.jpg' width='180' height='40' /></a>				</div>			");
        if ($('#sr_sidebar_box').html() !== '') {
          this.helper.debug("Html put: SUCCESS");
        } else {
          this.helper.debug("Html put: FAILURE");
        }
        this.helper.debug('Adding jQuery listener for login button click');
        return $('#sr_sidebar_box #sr_sidebar_login').on("click", function() {
          $(this).css('opacity', 0.7);
          return _this.model.fb_login();
        });
      }
    };

    SR_User_Controller.prototype.load_friends_read_single = function() {
      var _this = this;
      this.helper.debug('Loading friends who read this widget', 0);
      if ($('#sr_friends_single').length === 0) {
        this.helper.debug('#sr_friends_single is not found, cannot load friends who read this widget.');
        return false;
      }
      return this.model.fb_get_activity(function() {});
    };

    SR_User_Controller.prototype.load_lightbox = function() {
      var _this = this;
      this.helper.debug('Loading the lightbox', 0);
      if (window._sr.model.user.logged_in === false) {
        this.helper.debug("User is not logged in, don't load it");
        this.helper.debug('Finished');
        return false;
      }
      this.helper.debug('Prepending lightbox to <body>');
      $('<div/>', {
        id: 'sr_lightbox',
        html: "<div id='sr_lightbox_inner'></div>"
      }).prependTo('body');
      if ($('#sr_lightbox_inner').length !== 0) {
        this.helper.debug("Lightbox added: SUCCESS");
      } else {
        this.helper.debug("Lightbox added: FAILURE");
      }
      this.helper.debug('Setup jQuery listener for close lightbox link click');
      $('a#sr_close_lightbox').live('click', function() {
        return _this.close_lightbox();
      });
      return this.helper.debug('Finished');
    };

    SR_User_Controller.prototype.close_lightbox = function() {
      var _this = this;
      this.helper.debug('Closing lightbox', 0);
      this.helper.debug('Fading out');
      return $('#sr_lightbox').fadeOut(function() {
        $('#sr_lightbox #sr_lightbox_inner').html('');
        _this.helper.debug('Html lightbox inner set to blank');
        return _this.helper.debug('Finished');
      });
    };

    SR_User_Controller.prototype.show_lightbox = function(type) {
      var _this = this;
      this.helper.debug('Fade in lightbox', 0);
      this.helper.debug('Fading');
      return $('#sr_lightbox').fadeIn('fast', function() {
        _this.helper.debug('Finished');
        return _this.show_activity(type);
      });
    };

    SR_User_Controller.prototype.show_activity = function(type) {
      var _this = this;
      $('#sr_lightbox_inner').html("			<h3>Recent activity</h3>			<a id='sr_close_lightbox'>Close</a>			<div id='sr_loading'><img src='" + this.model.site.plugin_url + "/images/ajax-loader.gif' alt='Loading...'></div>			<ul id='sr_activity_tabs'>				<li id='sr_lightbox_everyone' class='sr_active_tab'><a>Everyone</a></li>				<li id='sr_lightbox_me'><a>Just you</a></li>			</ul>			<div id='sr_reads_list'><ul></ul></div>		");
      return this.model.fb_get_activity(function() {
        var html, read, story_type, _i, _len, _ref;
        _this.helper.debug("Putting reads into the lightbox", 0);
        $('#sr_loading').hide();
        _this.helper.debug("Found " + _this.model.activity.reads.length + " reads");
        html = '';
        _ref = _this.model.activity.reads;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          read = _ref[_i];
          if (read.from.id === _this.model.user.id) {
            story_type = 'sr_me_story';
          } else {
            story_type = 'sr_friend_story';
          }
          if (!read.data || !read.data.article) {
            continue;
          }
          html += "<li id='sr_read_" + read.id + "' class='" + story_type + "'>						<a class='name' href='//facebook.com/" + read.from.id + "' target='blank'>							<img class='story-img' src='https://graph.facebook.com/" + read.from.id + "/picture' width='50' height='50' alt='" + read.from.name + "' />						</a>						<div class='story-inner'>							<div class='story-title'>								<a class='name' href='//facebook.com/profile.php?id=" + read.from.id + "' target='blank'>									" + read.from.name + "								</a> read 								<a class='article' href='" + read.data.article.url + "' target='blank'>" + read.data.article.title + "</a>							</div>							<div class='story-meta'>								" + (_this.helper.relative_time(read.publish_time)) + "								<span>&middot; <a class='sr_story_delete'>Delete</a></span>							</div>						</div>						<div class='sr_clear'></div>					</li>";
        }
        $('#sr_reads_list ul').html(html);
        _this.helper.debug('Html put: SUCCESS');
        _this.helper.debug('Showing stuff');
        $('#sr_activity_tabs').show();
        $('#sr_reads_list').show();
        _this.helper.debug('Adding jQuery listener for filter tabs');
        $("#sr_activity_tabs a").on("click", function() {
          _this.helper.debug('Lightbox activity tab click detected', 0);
          $('#sr_activity_tabs li').removeClass('sr_active_tab');
          _this.helper.debug('Removed class from existing tab');
          $(this).closest('li').addClass('sr_active_tab');
          _this.helper.debug('Added class to the clicked tab');
          if ($(this).closest('li').attr('id') === 'sr_lightbox_everyone') {
            _this.helper.debug('Everyone tab detected, show all stories');
            $('#sr_reads_list ul li').show();
          } else if ($(this).closest('li').attr('id') === 'sr_lightbox_me') {
            _this.helper.debug('Me tab detected, just show my stories');
            $('#sr_reads_list ul li.sr_friend_story').hide();
          }
          return _this.helper.debug('Finished');
        });
        _this.helper.debug('Adding jQuery listener for deleting reads');
        $('.sr_story_delete').on("click", function() {
          var read_id;
          read_id = $(this).closest('li').attr('id').replace('sr_read_', '');
          return _this.model.fb_delete_read(read_id, function(cb) {
            return $("#sr_read_{read_id}").fadeOut(function() {
              return $("#sr_read_{read_id}").remove();
            });
          });
        });
        return _this.helper.debug('Finished');
      });
    };

    return SR_User_Controller;

  })();

  jQuery(document).ready(function() {
    var _this = this;
    return window._sr = new SR_User_Controller(function() {
      window._sr.load_sidebar();
    }, function() {
      window._sr.load_lightbox();
      window._sr.load_friends_read_single();
    });
  });

}).call(this);
