
define('app/helpers/url-param',[],function() {

	var Param = {};

  Param.exists = function(parameter) {
    var currentParameter, fullQString, i, paramArray, paramCount, queryStringComplete;
    fullQString = window.location.search.substring(1);
    paramCount = 0;
    queryStringComplete = "?";
    if (fullQString.length > 0) {
      paramArray = fullQString.split("&");
      i = 0;
      while (i < paramArray.length) {
        currentParameter = paramArray[i].split("=");
        if (currentParameter[0] === parameter) {
          return true;
        }
        i++;
      }
    }
    return false;
  };

  return Param;

});
define('app/helpers/debugger',['app/helpers/url-param'], function(Param) {

  var Debugger = {};

  Debugger.start = function() {
    if (Param.exists('sr_debug')) {
      this.debug_mode = true;
      return console.log("***********************************************\n* Welcome to the Social Reader debug console! *\n***********************************************");
    } else {
      return this.debug_mode = false;
    }
  };

  Debugger.log = function(message, indent) {
    if (indent == null) {
      indent = 1;
    }
    if (this.debug_mode === true) {
      if (indent === 1) {
        return console.log("  * " + message);
      } else if (indent === 2) {
        return console.log("    - "+message);
      } else if (indent === 0) {
        return console.log("\n" + message + ":");
      }
    }
  };

  // Start the debugger and return
  Debugger.start();
  return Debugger;

});



(function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,v=e.reduce,h=e.reduceRight,d=e.filter,g=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,_=Object.keys,j=i.bind,w=function(n){return n instanceof w?n:this instanceof w?(this._wrapped=n,void 0):new w(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=w),exports._=w):n._=w,w.VERSION="1.4.3";var A=w.each=w.forEach=function(n,t,e){if(null!=n)if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a in n)if(w.has(n,a)&&t.call(e,n[a],a,n)===r)return};w.map=w.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e[e.length]=t.call(r,n,u,i)}),e)};var O="Reduce of empty array with no initial value";w.reduce=w.foldl=w.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduce===v)return e&&(t=w.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(O);return r},w.reduceRight=w.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduceRight===h)return e&&(t=w.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=w.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(O);return r},w.find=w.detect=function(n,t,r){var e;return E(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},w.filter=w.select=function(n,t,r){var e=[];return null==n?e:d&&n.filter===d?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&(e[e.length]=n)}),e)},w.reject=function(n,t,r){return w.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},w.every=w.all=function(n,t,e){t||(t=w.identity);var u=!0;return null==n?u:g&&n.every===g?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var E=w.some=w.any=function(n,t,e){t||(t=w.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};w.contains=w.include=function(n,t){return null==n?!1:y&&n.indexOf===y?-1!=n.indexOf(t):E(n,function(n){return n===t})},w.invoke=function(n,t){var r=o.call(arguments,2);return w.map(n,function(n){return(w.isFunction(t)?t:n[t]).apply(n,r)})},w.pluck=function(n,t){return w.map(n,function(n){return n[t]})},w.where=function(n,t){return w.isEmpty(t)?[]:w.filter(n,function(n){for(var r in t)if(t[r]!==n[r])return!1;return!0})},w.max=function(n,t,r){if(!t&&w.isArray(n)&&n[0]===+n[0]&&65535>n.length)return Math.max.apply(Math,n);if(!t&&w.isEmpty(n))return-1/0;var e={computed:-1/0,value:-1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;a>=e.computed&&(e={value:n,computed:a})}),e.value},w.min=function(n,t,r){if(!t&&w.isArray(n)&&n[0]===+n[0]&&65535>n.length)return Math.min.apply(Math,n);if(!t&&w.isEmpty(n))return 1/0;var e={computed:1/0,value:1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;e.computed>a&&(e={value:n,computed:a})}),e.value},w.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=w.random(r++),e[r-1]=e[t],e[t]=n}),e};var F=function(n){return w.isFunction(n)?n:function(t){return t[n]}};w.sortBy=function(n,t,r){var e=F(t);return w.pluck(w.map(n,function(n,t,u){return{value:n,index:t,criteria:e.call(r,n,t,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(e>r||void 0===e)return-1}return n.index<t.index?-1:1}),"value")};var k=function(n,t,r,e){var u={},i=F(t||w.identity);return A(n,function(t,a){var o=i.call(r,t,a,n);e(u,o,t)}),u};w.groupBy=function(n,t,r){return k(n,t,r,function(n,t,r){(w.has(n,t)?n[t]:n[t]=[]).push(r)})},w.countBy=function(n,t,r){return k(n,t,r,function(n,t){w.has(n,t)||(n[t]=0),n[t]++})},w.sortedIndex=function(n,t,r,e){r=null==r?w.identity:F(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;u>r.call(e,n[o])?i=o+1:a=o}return i},w.toArray=function(n){return n?w.isArray(n)?o.call(n):n.length===+n.length?w.map(n,w.identity):w.values(n):[]},w.size=function(n){return null==n?0:n.length===+n.length?n.length:w.keys(n).length},w.first=w.head=w.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:o.call(n,0,t)},w.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},w.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},w.rest=w.tail=w.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},w.compact=function(n){return w.filter(n,w.identity)};var R=function(n,t,r){return A(n,function(n){w.isArray(n)?t?a.apply(r,n):R(n,t,r):r.push(n)}),r};w.flatten=function(n,t){return R(n,t,[])},w.without=function(n){return w.difference(n,o.call(arguments,1))},w.uniq=w.unique=function(n,t,r,e){w.isFunction(t)&&(e=r,r=t,t=!1);var u=r?w.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:w.contains(a,r))||(a.push(r),i.push(n[e]))}),i},w.union=function(){return w.uniq(c.apply(e,arguments))},w.intersection=function(n){var t=o.call(arguments,1);return w.filter(w.uniq(n),function(n){return w.every(t,function(t){return w.indexOf(t,n)>=0})})},w.difference=function(n){var t=c.apply(e,o.call(arguments,1));return w.filter(n,function(n){return!w.contains(t,n)})},w.zip=function(){for(var n=o.call(arguments),t=w.max(w.pluck(n,"length")),r=Array(t),e=0;t>e;e++)r[e]=w.pluck(n,""+e);return r},w.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},w.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if("number"!=typeof r)return e=w.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},w.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},w.range=function(n,t,r){1>=arguments.length&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=Array(e);e>u;)i[u++]=n,n+=r;return i};var I=function(){};w.bind=function(n,t){var r,e;if(n.bind===j&&j)return j.apply(n,o.call(arguments,1));if(!w.isFunction(n))throw new TypeError;return r=o.call(arguments,2),e=function(){if(!(this instanceof e))return n.apply(t,r.concat(o.call(arguments)));I.prototype=n.prototype;var u=new I;I.prototype=null;var i=n.apply(u,r.concat(o.call(arguments)));return Object(i)===i?i:u}},w.bindAll=function(n){var t=o.call(arguments,1);return 0==t.length&&(t=w.functions(n)),A(t,function(t){n[t]=w.bind(n[t],n)}),n},w.memoize=function(n,t){var r={};return t||(t=w.identity),function(){var e=t.apply(this,arguments);return w.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},w.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},w.defer=function(n){return w.delay.apply(w,[n,1].concat(o.call(arguments,1)))},w.throttle=function(n,t){var r,e,u,i,a=0,o=function(){a=new Date,u=null,i=n.apply(r,e)};return function(){var c=new Date,l=t-(c-a);return r=this,e=arguments,0>=l?(clearTimeout(u),u=null,a=c,i=n.apply(r,e)):u||(u=setTimeout(o,l)),i}},w.debounce=function(n,t,r){var e,u;return function(){var i=this,a=arguments,o=function(){e=null,r||(u=n.apply(i,a))},c=r&&!e;return clearTimeout(e),e=setTimeout(o,t),c&&(u=n.apply(i,a)),u}},w.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},w.wrap=function(n,t){return function(){var r=[n];return a.apply(r,arguments),t.apply(this,r)}},w.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},w.after=function(n,t){return 0>=n?t():function(){return 1>--n?t.apply(this,arguments):void 0}},w.keys=_||function(n){if(n!==Object(n))throw new TypeError("Invalid object");var t=[];for(var r in n)w.has(n,r)&&(t[t.length]=r);return t},w.values=function(n){var t=[];for(var r in n)w.has(n,r)&&t.push(n[r]);return t},w.pairs=function(n){var t=[];for(var r in n)w.has(n,r)&&t.push([r,n[r]]);return t},w.invert=function(n){var t={};for(var r in n)w.has(n,r)&&(t[n[r]]=r);return t},w.functions=w.methods=function(n){var t=[];for(var r in n)w.isFunction(n[r])&&t.push(r);return t.sort()},w.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},w.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},w.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)w.contains(r,u)||(t[u]=n[u]);return t},w.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)null==n[r]&&(n[r]=t[r])}),n},w.clone=function(n){return w.isObject(n)?w.isArray(n)?n.slice():w.extend({},n):n},w.tap=function(n,t){return t(n),n};var S=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof w&&(n=n._wrapped),t instanceof w&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case"[object String]":return n==t+"";case"[object Number]":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object RegExp]":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if("object"!=typeof n||"object"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;r.push(n),e.push(t);var a=0,o=!0;if("[object Array]"==u){if(a=n.length,o=a==t.length)for(;a--&&(o=S(n[a],t[a],r,e)););}else{var c=n.constructor,f=t.constructor;if(c!==f&&!(w.isFunction(c)&&c instanceof c&&w.isFunction(f)&&f instanceof f))return!1;for(var s in n)if(w.has(n,s)&&(a++,!(o=w.has(t,s)&&S(n[s],t[s],r,e))))break;if(o){for(s in t)if(w.has(t,s)&&!a--)break;o=!a}}return r.pop(),e.pop(),o};w.isEqual=function(n,t){return S(n,t,[],[])},w.isEmpty=function(n){if(null==n)return!0;if(w.isArray(n)||w.isString(n))return 0===n.length;for(var t in n)if(w.has(n,t))return!1;return!0},w.isElement=function(n){return!(!n||1!==n.nodeType)},w.isArray=x||function(n){return"[object Array]"==l.call(n)},w.isObject=function(n){return n===Object(n)},A(["Arguments","Function","String","Number","Date","RegExp"],function(n){w["is"+n]=function(t){return l.call(t)=="[object "+n+"]"}}),w.isArguments(arguments)||(w.isArguments=function(n){return!(!n||!w.has(n,"callee"))}),w.isFunction=function(n){return"function"==typeof n},w.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},w.isNaN=function(n){return w.isNumber(n)&&n!=+n},w.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"==l.call(n)},w.isNull=function(n){return null===n},w.isUndefined=function(n){return void 0===n},w.has=function(n,t){return f.call(n,t)},w.noConflict=function(){return n._=t,this},w.identity=function(n){return n},w.times=function(n,t,r){for(var e=Array(n),u=0;n>u;u++)e[u]=t.call(r,u);return e},w.random=function(n,t){return null==t&&(t=n,n=0),n+(0|Math.random()*(t-n+1))};var T={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};T.unescape=w.invert(T.escape);var M={escape:RegExp("["+w.keys(T.escape).join("")+"]","g"),unescape:RegExp("("+w.keys(T.unescape).join("|")+")","g")};w.each(["escape","unescape"],function(n){w[n]=function(t){return null==t?"":(""+t).replace(M[n],function(t){return T[n][t]})}}),w.result=function(n,t){if(null==n)return null;var r=n[t];return w.isFunction(r)?r.call(n):r},w.mixin=function(n){A(w.functions(n),function(t){var r=w[t]=n[t];w.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),z.call(this,r.apply(w,n))}})};var N=0;w.uniqueId=function(n){var t=""+ ++N;return n?n+t:t},w.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var q=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\t|\u2028|\u2029/g;w.template=function(n,t,r){r=w.defaults({},r,w.templateSettings);var e=RegExp([(r.escape||q).source,(r.interpolate||q).source,(r.evaluate||q).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,a,o){return i+=n.slice(u,o).replace(D,function(n){return"\\"+B[n]}),r&&(i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'"),e&&(i+="'+\n((__t=("+e+"))==null?'':__t)+\n'"),a&&(i+="';\n"+a+"\n__p+='"),u=o+t.length,t}),i+="';\n",r.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var a=Function(r.variable||"obj","_",i)}catch(o){throw o.source=i,o}if(t)return a(t,w);var c=function(n){return a.call(this,n,w)};return c.source="function("+(r.variable||"obj")+"){\n"+i+"}",c},w.chain=function(n){return w(n).chain()};var z=function(n){return this._chain?w(n).chain():n};w.mixin(w),A(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=e[n];w.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!=n&&"splice"!=n||0!==r.length||delete r[0],z.call(this,r)}}),A(["concat","join","slice"],function(n){var t=e[n];w.prototype[n]=function(){return z.call(this,t.apply(this._wrapped,arguments))}}),w.extend(w.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),"function"==typeof define&&define.amd&&define("underscore",[],function(){return w})}).call(this);
define('app/tests/main',[
	'require',
	'app/helpers/debugger',
	'app/helpers/url-param',
	'underscore'
], function(
	require,
	Debugger,
	Param,
	_
) {

	var Tests = {};

	Tests.modules = [
		//'helpers/time'
		//'helpers/debugger'
		'helpers/cookie',
		'helpers/single-format'
	];

	Tests.are_on = function() {
		Debugger.log('Seeing if we\'re running tests');
		if (Param.exists('sr_tests')) {
			Debugger.log('Testing is ON');
			return true;
		} else {
			Debugger.log('Testing is OFF');
			return false;
		}
	};

	Tests.start = function() {
		var _this = this;
			Debugger.log('Finished loading qunit.js');
			_.each(_this.modules, function(module) {
				require(['app/tests/'+module], function(obj) {
					Debugger.log('Loaded '+'app/tests/'+module+', now run it');
					obj.run();
				});
			});
		
		
	};




	return Tests;

});
define('app/helpers/cookie',['require'], function() {

  var Cookie = {};


  Cookie.set = function(c_name, value, exdays) {
    var c_value, exdate;
    exdate = new Date();
    exdate.setDate(exdate.getDate() + exdays);
    c_value = escape(value) + (!(exdays != null) ? "" : "; expires=" + exdate.toUTCString());
    return document.cookie = c_name + "=" + c_value;
  };

  Cookie.get = function(c_name) {
    var ARRcookies, i, x, y;
    ARRcookies = document.cookie.split(";");
    i = 0;
    while (i < ARRcookies.length) {
      x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
      y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
      x = x.replace(/^\s+|\s+$/g, "");
      if (x === c_name) {
        return unescape(y);
      }
      i++;
    }
    return false;
  };

  Cookie.exists = function(c_name) {
    if (this.get(c_name)) {
      return true;
    } else {
      return false;
    }
  };

  Cookie.remove = function(c_name) {
    return document.cookie = c_name + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
  };

  return Cookie;


});
    
define('app/models/cache',['require','app/helpers/debugger','app/helpers/cookie'],function(require) {

  var Debugger  = require('app/helpers/debugger');
  var Cookie    = require('app/helpers/cookie');


  var Cache = {};

  Cache.save = function(user_id, field, data, cb) {
    Debugger.log('Saving '+field+' to the cache');
    var _this = this;
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "save_cache",
      fb_id: user_id,
      field: field,
      data: data
    }, function(data) {
      if (data != '0') {
        Debugger.log(field+' saved successfully');
        Cookie.set('sr_'+field+'d', 'true', null);
        Debugger.log('Finished');
        if (cb !== undefined) cb();
      } else {
        Debugger.log('Data failed to save:');
        Debugger.log('Finished');
        if (cb !== undefined) cb();
      }
    });
  };

  // We make our own custom method for saving the user because we need to deal with auto sharing in the user object.
  // Other saving just uses the Cache model.
  Cache.save_user = function(user, cb) {
    var _this = this;
    Debugger.log('Saving user', 0);
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "save_user",
      user: user
    }, function(data) {
      try {
        var obj = JSON.parse(data);
        if (obj) {
          Cookie.set('sr_user_id', user.id, null);
          Cookie.set('sr_user_cached', 'true', null);
          Debugger.log('user_cache saved successfully');
          Debugger.log('Finished');
        }
        window._sr.user = obj;
        cb();
      } catch(e) {
        Debugger.log('Failed to parse JSON');
        console.log(data);
      }
    });
  };

  Cache.get = function(user_id, field, cb) {
    var _this = this;
    Debugger.log('Getting the '+field);
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "get_cache",
      fb_id: user_id,
      field: field
    }, function(data) {
      Debugger.log('Ajax request complete');
      Debugger.log('Converting data to json object');
      try {
        var parsed = JSON.parse(data);
        Debugger.log('JSON parsed: SUCCESS');
        Debugger.log('Finished');
        if (cb !== null) cb(parsed);
      }
      catch(e) {
        Debugger.log('JSON parsed: FAILURE');
        Debugger.log('Finished');
        if (cb !== null) cb();
      }
    });
  };

  // Ensures all window cached variables are gone, and all cookies referencing to the cache are gone.
  Cache.clear_all = function() {
    delete window._sr.user;
    delete window._sr.activity;
    delete window._sr.friends;
    Cookie.remove('sr_user_id');
    Cookie.remove('sr_user_cached');
    Cookie.remove('sr_activity_cached');
    Cookie.remove('sr_friends_cached');
  };

  Cache.refresh = function() {
    Debugger.log('Refreshing cache by deleting cookies', 0);
    Cookie.remove('sr_activity_cache');
    Cookie.remove('sr_friends_cache');
  };

  return Cache;
  

});
define('app/models/fb',['require','app/helpers/debugger','app/helpers/cookie','app/models/cache','underscore'],function(require) {

  var Debugger = require('app/helpers/debugger');
  var Cookie   = require('app/helpers/cookie');
  var Cache    = require('app/models/cache');
  var _ = require('underscore');


	var Fb = {
		user: {},
		friends: [],
		activity: {}
	};

  Fb.init = function(site, cb) {
    var _this = this;
    var app_id = site.fb_app_id;
    var channel_url = site.fb_channel_url;
    var sdk_disabled = site.fb_sdk_disable;
    if (!app_id) {
      Debugger.log('Facebook app id not specified, STOP');
      return false;
    }
    Debugger.log('Initiliazing Facebook', 0);
    if (sdk_disabled == 'on') {
      Debugger.log('SDK loading disabled, wait for it to exist');
      this.sdk_check_count = 0;
      this.wait_for_fb(function() {
        Debugger.log('SDK loaded');
        cb();
      });
    } else {
      $('body').prepend('<div id="fb-root"></div>');
      Debugger.log('Prepended div fb-root to body');
      window.fbAsyncInit = function() {
        Debugger.log("Loading the SDK asynchronously with app id: " + app_id+ ', channel url: '+channel_url);
        FB.init({
          appId: app_id,
          channelUrl: channel_url,
          status: true,
          cookie: true,
          xfbml: true
        });
        Debugger.log('SDK loaded');
        Debugger.log('Finished');
        return cb();
      };
      return (function(d, debug) {
        var id, js, ref;
        js = void 0;
        id = "facebook-jssdk";
        ref = d.getElementsByTagName("script")[0];
        if (d.getElementById(id)) {
          return;
        }
        js = d.createElement("script");
        js.id = id;
        js.async = true;
        js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
        return ref.parentNode.insertBefore(js, ref);
      })(window.document, false);
    }
  };

  Fb.wait_for_fb = function (cb) {
    this.sdk_check_count++;
    if (this.sdk_check_count > 10) {
      Debugger.log('Facebook SDK loading: FAILURE');
      return;
    }
    var _this = this;
    if (window.FB) {
      Debugger.log(_this.sdk_check_count+': window.FB exists: SUCCESS');
       if ($('#fb-root').length === 1) {
        Debugger.log('<div id="fb-root"></div> exists: SUCCESS');
        cb();
      } else {
        Debugger.log(_this.sdk_check_count+': <div id="fb-root"></div> does not exist, try again in 100ms');
        setTimeout(function() {
          _this.wait_for_fb();
        }, 100);
      }
    } else {
      Debugger.log(_this.sdk_check_count+': window.FB does not exist, try again in 100ms');
      setTimeout(function() {
        _this.wait_for_fb();
      }, 100);
    }
  };

	Fb.is_logged_in = function(cb) {
    var _this = this;
    Debugger.log('See if user is logged in to Facebook and the app', 0);
    Debugger.log('Query Facebook');
    return FB.getLoginStatus(function(response) {
      Debugger.log('Response from Facebook received');
      if (response.status === 'connected') {
        Debugger.log('User is logged in');
        _this.user.logged_in = true;
        Debugger.log('Finished');
        return cb(true);
      } else {
        Debugger.log('User is not logged in');
        _this.user.logged_in = false;
        Debugger.log('Finished');
        return cb(false);
      }
    });
  };

  Fb.get_user = function(cb) {
    var _this = this;
    Debugger.log('Not in cache, querying Facebook');
    return FB.api('/me', function(me) {
      Debugger.log('Response received, setting values');
      me.picture = "//graph.facebook.com/" + me.id + "/picture";
      Debugger.log('Finished');
      return cb(me);
    });
  };


  Fb.login = function(cb) {
    var _this = this;
    Debugger.log('Logging in the user to Facebook', 0);
    return FB.login((function(response) {
      Debugger.log('Response received from Facebook');
      if (response.status === 'connected') {
        Debugger.log('Logged in successfully');
        cb();
      } else {
        return Debugger.log("User cancelled login or did not fully authorize.");
      }
    }), {
      scope: "publish_actions"
    });
  };

  Fb.logout = function(cb) {
    var _this = this;
    Debugger.log('Logging the user out of Facebook', 0);
    return FB.logout(function(response) {
      Debugger.log('Logout successful');
      Debugger.log('Removing cached coookie NEED TO DO THIS');
      Debugger.log('Reloading the page');
      cb();
    });
  };

  Fb.add_read = function() {
    var _this = this;
    Debugger.log('Adding user read', 0);
    return FB.api("/me/news.reads?article=" + document.URL, "post", function(response) {
      Debugger.log('Response received from Facebook');
      if (response.id) {
        Debugger.log("Read " + response.id + " posted to Facebook: SUCCESS");
        _this.get_article(function(article) {
          if (!window._sr.activity.reads) {
            window._sr.activity.reads = [];
          }
          window._sr.activity.reads.unshift(article);
        });
      } else {
        Debugger.log("Read posted to Facebook: FAILURE - "+response.error.message);
      }
      Debugger.log('Finished');
    });
  };

  Fb.get_article = function(article_id, cb) {
    Debugger.log('Getting article '+article_id);
    return FB.api("/"+article_id, "get", function(response) {
      if (response.error) {
        Debugger('Failed to get article: '+response.error);
        cb(false);
      } else {
        cb(response);
      }
    });
  };

  Fb.delete_read = function(id, cb) {
    var _this = this;
    Debugger.log('Deleting user read', 0);
    return FB.api("/" + id, "delete", function(response) {
      Debugger.log('Response received from Facebook');
      if (response === true) {
        Debugger.log('Read deleted from Facebook: SUCCESS');
        _.each(window._sr.activity.reads, function(read, key) {
          if (read.id === id) {
            delete(reads[key]);
          }
        });
      } else {
        Debugger.log('Read deleted from Facebook: FAILURE');
        Debugger.log('Error message from Facebook: '+response.error.message);
      }
      return cb();
    });
  };

  Fb.get_friend_users = function(cb) {
    var _this = this;
    return FB.api('/me/friends?fields=id,name,installed', function(response) {
      Debugger.log('Response received, finding friend users');
      var friends_who_use_the_app = [];
      _.each(response.data, function(friend) {
        if (friend.installed === true) {
          delete friend.installed;
          friends_who_use_the_app.push(friend);
        }
      });
      Debugger.log(friends_who_use_the_app.length + " friends found");
      Debugger.log('Finished');
			cb(friends_who_use_the_app);
      Cache.save(window._sr.user.id, 'friends_cache', friends_who_use_the_app);
    });
  };

  Fb.get_activity = function(cb) {
    _this = this;
    var batch_arr = [];
    batch_arr.push({
      method: "GET",
      user_id: window._sr.user.id,
      relative_url: "me/news.reads?fields=id,comment_info,comments,comment_info,likes,like_info,data,publish_time,from"
    });

    // Create batch array
    _.each(window._sr.friends, function(friend) {
      batch_arr.push({
        method: "GET",
        user_id: friend.id,
        relative_url: friend.id + "/news.reads?fields=id,comment_info,comments,comment_info,likes,like_info,data,publish_time,from"
      });
    });
    Debugger.log("Starting batch requests for the " + window._sr.friends.length + " friends using this app");

    // Do request
    return FB.api("/", "POST", {
      batch: batch_arr
    }, function(responses) {
      Debugger.log('Response received from Facebook');
      var activity = {};
      activity.reads = [];
      _.each(responses, function(response, key) {
        if (!response || !response.body) return;
        var body = JSON.parse(response.body);
        activity.reads.push(body);
         // Save a cache file for every single user
        Cache.save(batch_arr[key].user_id, 'activity_cache', body);
      });
      cb(activity);
    });

  };

  Fb.group_reads = function(reads) {
    var new_reads = [];
    _.each(_sr.activity.reads, function(read) {
      _.each(read.data, function(read) {
        new_reads.push(read);
      });
    });
    Debugger.log('Sorting the reads by publish_time descending');
    var sorted_reads = new_reads.sort(function(a, b) {
      a = new Date(a.publish_time);
      b = new Date(b.publish_time);
      return a>b ? -1 : a<b ? 1 : 0;
    });
    Debugger.log('Finished');
    return sorted_reads;
  };

  return Fb;


});
define('app/models/user',['require','app/models/fb','app/helpers/cookie','app/helpers/debugger','app/models/cache'],function(require) {

  var Fb = require('app/models/fb');
  var Cookie = require('app/helpers/cookie');
  var Debugger = require('app/helpers/debugger');
  var Cache = require('app/models/cache');


  var $ = jQuery;

  var User = {};

  User.init = function(cb1, cb2) {

    // window._sr should be populated already
    var _sr = window._sr;
    var _this = this;

    Fb.init(_sr.site,  function() {
      Fb.is_logged_in(function(is_logged_in) {
        if (is_logged_in === true) {
          _this.get_user(function() {
            _this.queue_read();
            cb1();
            _this.get_friends(function() {
              _this.get_activity(function() {
                cb2();
              });
            });
          });
        } else {
          Cache.clear_all();
          cb1();
        }
      });
    });
  
  };

  User.get_user = function(cb) {
    var _this = this;
    Debugger.log('Getting user', 0);

    // If user already exists in cache for this session
    if (window._sr && window._sr.user) {
      Debugger.log('Already in cache, get from the window._sr.user variable');
      Debugger.log('Finished');
      return cb();
    }

    // Get user from Facebook and ave the cache, updating auto sharing back end
    Fb.get_user(function(user) {
      Cache.save_user(user, function() {
        cb();
      });
    });

  };

  User.get_friends = function(cb) {
    Debugger.log('Getting friends', 0);
    // If friends already exists in cache for this session
    if (window._sr && window._sr.friends !== undefined) {
      Debugger.log('Already in cache, get from the window._sr.friends variable');
      Debugger.log('Finished');
      return cb();
    }
    // Get friends from Facebook and save to cache
    Fb.get_friend_users(function(friends) {
      window._sr.friends = friends;
      cb();
    });
  };

  User.get_activity = function(cb) {
    Debugger.log('Getting you and your and friends activity', 0);
    // If activity already exists in cache for this session
    if (window._sr && window._sr.activity !== undefined) {
      Debugger.log('Already in cache, get from the window._sr.activity variable');
      Debugger.log('Finished');
      return cb();
    }
    // Get activity from Facebook and save to cache
    Fb.get_activity(function(activity) {
      window._sr.activity = activity;
      cb();
    });
  };

  // Queues read to Facebook. Returns true if queued, false if not.
  User.queue_read = function(cb) {
    Debugger.log('Queuing auto-read to Facebook', 0);
    if (window._sr.user.is_auto_sharing === true && window._sr.page.is_readable === true) {
      Debugger.log('Auto-sharing on, page is readable, queue the read');
      setTimeout(function() {
        Fb.add_read();
      }, 10000);
      Debugger.log('Finished');
      return true;
    } else {
      Debugger.log('Either auto-sharing is off or this page is not readable');
      Debugger.log('Finished');
      return false;
    }
  };

  User.set_auto_sharing = function(bool) {
    var _this = this;
    Debugger.log('Setting auto sharing', 0);
    Debugger.log("Changing auto sharing to " + bool);
    window._sr.user.is_auto_sharing = bool;
    var user = window._sr.user;
    Cache.save(user.id, 'user_cache', user);
  };

  User.login = function() {
    Fb.login(function() {
      window.location.reload();
    });
  };

  User.logout = function() {
    Fb.logout(function() {
      Cache.clear_all();
      window.location.reload();
    });
  };



  return User;



});

define('app/models/analytics-listeners',[],function() {

	var Listeners = {};

	Listeners.sidebar_logged_in = [
		{ 
			selector: '#sr_sidebar_activity a',
			actions: ['click', 'mouseenter'],
			label: 'Activity'
		},
		{
			selector: '.sr_sidebar_toggle',
			actions: ['click', 'mouseenter'],
			label: 'Toggle auto-sharing'
		},
		{
			selector: 'a#sr_sidebar_img',
			actions: ['click', 'mouseenter'],
			label: 'Profile picture'				
		},
		{
			selector: '#sr_sidebar_name',
			actions: ['click', 'mouseenter'],
			label: 'Profile name'			
		},
		{
			selector: '#sr_sidebar_logout a',
			actions: ['click', 'mouseenter'],
			label: 'Logout'				
		}
	];

	Listeners.sidebar_logged_out = [
		{ 
			selector: 'a#sr_sidebar_login',
			actions: ['click', 'mouseenter'],
			label: 'Login button'
		}
	];

	Listeners.frs_single = [
		{
			selector: '.sr_read_names a',
			actions: ['click', 'mouseenter'],
			label: 'Name'
		},
		{
			selector: '.sr_read_thumbs a',
			actions: ['click', 'mouseenter'],
			label: 'Thumb'
		}
	];

	Listeners.lightbox = [
		{
			selector: 'a#sr_close_lightbox',
			actions: ['click', 'mouseenter'],
			label: 'Close'
		}, 
		{
			selector: '#sr_lightbox_everyone a',
			actions: ['click', 'mouseenter'],
			label: 'Show everyone tab'
		},
		{
			selector: '#sr_lightbox_me a',
			actions: ['click', 'mouseenter'],
			label: 'Show me tab'
		},
		{
			selector: '#sr_lightbox_inner li a img.story-img',
			actions: ['click', 'mouseenter'],
			label: 'Story profile pic'
		},
		{
			selector: '#sr_lightbox_inner li .story-title a.name',
			actions: ['click', 'mouseenter'],
			label: 'Story user name'
		},		
		{
			selector: '#sr_lightbox_inner li .story-title a.article',
			actions: ['click', 'mouseenter'],
			label: 'Story article title'
		},
		{
			selector: '#sr_lightbox_inner li a.sr_story_delete',
			actions: ['click', 'mouseenter'],
			label: 'Story delete'
		}
	];

	return Listeners;

});
define('app/models/analytics',['require','app/helpers/debugger','underscore','app/models/analytics-listeners'],function(require) {

	var Debugger = require('app/helpers/debugger');
	var _ = require('underscore');
	var Listeners = require('app/models/analytics-listeners');


	var Analytics = {
		initialized: false,
		queue: []
	};

	Analytics.init = function() {
		var _this = this, user = window._sr.user, site = window._sr.site;
		Debugger.log('Starting analytics', 0);
		if (site.analytics_disabled === true) {
			Debugger.log('Analytics has been disabled on this site: STOP');
			return false;
		} else {
			Debugger.log('Analytics is enabled for this site');
		}
	
		window._gaq = window._gaq || [];
		window._gaq.push(['sr._setAccount', 'UA-37231887-1']);
		Debugger.log('Setting custom variables');
		window._gaq.push(['sr.setCustomVar', 1, 'logged_in', user.logged_in, 2]);
		window._gaq.push(['sr.setCustomVar', 2, 'plugin_version', site.plugin_version, 2]);
		window._gaq.push(['sr._setDomainName', window.location.host]);
		Debugger.log('Tracking pageview');
		window._gaq.push(['sr._trackPageview']);

		// Load script in after setting variables
		Debugger.log('Loading ga.js script');
		require(['ga'], function() {
			_this.initialized = true;
			_.each(_this.queue, function(type) {
				_this.setup_listeners(type);
			});
			Debugger.log('Finished');
		});
	};

	Analytics.track_event = function(category, action, label) {
		Debugger.log('Tracking: '+ category+ ', ' + action + ', ' + label);
		if (this.site.analytics_disabled == 'on') {
			Debugger.log('Analytics has been disabled on this site: STOP');
			return false;
		}
		window._gaq.push(['sr._trackEvent', category, action, label]);
	};

	Analytics.setup_listeners = function(type) {
		
		// If analytics hasn't yet been initialized, add to queue to they run when it has
		if (this.initialized === false) {
			Debugger.log('Analytics not yet initialized, queue '+type);
			this.queue.push(type);
		} else {
			var _this = this;
			Debugger.log("Setting up '"+type+"' listeners", 0);
			var listeners = Listeners[type];
			if (!listeners) {
				Debugger.log('No listeners found');
				return false;
			}
			_.each(listeners, function(listener) {
				_.each(listener.actions, function(action) {
					Debugger.log("Setting up listener:");
					Debugger.log("category: '"+type+"'", 2);
					Debugger.log("action: '"+action+"'", 2);
					Debugger.log("label: '"+listener.label+"'", 2);
					Debugger.log("selector: '"+listener.selector+"'", 2);
					$(listener.selector).on(action, function() {
						_this.track_event(type, action, listener.label);
					});
				});
			});
		}

	};


	return Analytics;

});

define('app/helpers/time',[],function() {

  var Time = {};

  Time.relative = function(time) {
    var elapsed, msPerDay, msPerHour, msPerMinute, msPerMonth, msPerYear, timestamp;
    timestamp = new Date(time).getTime();
    msPerMinute = 60 * 1000;
    msPerHour = msPerMinute * 60;
    msPerDay = msPerHour * 24;
    msPerMonth = msPerDay * 30;
    msPerYear = msPerDay * 365;
    elapsed = new Date().getTime() - timestamp;
    if (elapsed < msPerMinute) {
      return Math.round(elapsed / 1000) + " seconds ago";
    } else if (elapsed < msPerHour) {
      return Math.round(elapsed / msPerMinute) + " minutes ago";
    } else if (elapsed < msPerDay) {
      return Math.round(elapsed / msPerHour) + " hours ago";
    } else if (elapsed < msPerMonth) {
      return Math.round(elapsed / msPerDay) + " days ago";
    } else if (elapsed < msPerYear) {
      return Math.round(elapsed / msPerMonth) + " months ago";
    } else {
      return Math.round(elapsed / msPerYear) + " years ago";
    }
  };

  return Time;

});
define('app/helpers/sample-data',['require', 'app/helpers/debugger', 'app/helpers/url-param'], function(require, Debugger, Param) {
	 
  // add 'sr_sample_data' as a query param to enable

  var SampleData = {};

  SampleData.is_on = function() {
    if (Param.exists('sr_sample_data')) {
      return true;
    } else {
      return false;
    }
  };

  SampleData.reads = { 
    "data": [
       {
        "id": "10152353237580383", 
        "from": {
          "name": "Bridget Clay", 
          "id": "509762020"
        }, 
        "start_time": "2012-12-15T21:22:08+0000", 
        "end_time": "2012-12-15T21:22:08+0000", 
        "publish_time": "2012-12-15T21:22:08+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "304735542977218", 
            "url": "http://localhost:8888/wordpress/hello-world/", 
            "type": "article", 
            "title": "Hartley gets its own Dating Service"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152337507880383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-12-09T22:12:39+0000", 
        "end_time": "2012-12-09T22:12:39+0000", 
        "publish_time": "2012-12-09T22:12:39+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "378252925592550", 
            "url": "http://localhost:8888/wordpress/rewarw/", 
            "type": "article", 
            "title": "Comments of the Week #2"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152325332405383", 
        "from": {
          "name": "Jenna Brown", 
          "id": "513449780"
        }, 
        "start_time": "2012-12-04T20:10:08+0000", 
        "end_time": "2012-12-04T20:10:08+0000", 
        "publish_time": "2012-12-04T20:10:08+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "394572300623745", 
            "url": "http://localhost:8888/wordpress/rewarw/", 
            "type": "article", 
            "title": "How To Pull at Jesters"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152319464040383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-12-02T14:04:00+0000", 
        "end_time": "2012-12-02T14:04:00+0000", 
        "publish_time": "2012-12-02T14:04:00+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "311512682286598", 
            "url": "http://sotontab.co.uk/news/2012/12/02/susu-disability-officer-guilty-of-hacking/", 
            "type": "article", 
            "title": "SUSU Disability Officer Guilty of HACKING"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152291691295383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-21T18:05:45+0000", 
        "end_time": "2012-11-21T18:05:45+0000", 
        "publish_time": "2012-11-21T18:05:45+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "502687413098147", 
            "url": "http://sotontab.co.uk/news/2012/11/21/nus-referendum-the-polls-so-far/", 
            "type": "article", 
            "title": "NUS Referendum: The Polls So Far"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152265885575383", 
        "from": {
          "name": "Abi Houghton", 
          "id": "1844202473"
        }, 
        "start_time": "2012-11-11T17:09:51+0000", 
        "end_time": "2012-11-11T17:09:51+0000", 
        "publish_time": "2012-11-11T17:09:51+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "174390416033247", 
            "url": "http://knaqu.org/video-shokuese-shikoni-se-qfar-veprimi-ben-barack-obama/", 
            "type": "article", 
            "title": "Video Shokuese! Shikoni se qfar veprimi ben Barack Obama"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152265261350383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-11T12:06:41+0000", 
        "end_time": "2012-11-11T12:06:41+0000", 
        "publish_time": "2012-11-11T12:06:41+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "203202176481809", 
            "url": "http://sotontab.co.uk/pictures/2012/11/11/the-damming-truth-reasons-not-to-wear-a-poppy/", 
            "type": "article", 
            "title": "THE DAMNING TRUTH: Reasons NOT to wear a poppy…"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152265025840383", 
        "from": {
          "name": "George Marneros", 
          "id": "504855756"
        }, 
        "start_time": "2012-11-11T08:17:55+0000", 
        "end_time": "2012-11-11T08:17:55+0000", 
        "publish_time": "2012-11-11T08:17:55+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "383395001741841", 
            "url": "http://sotontab.co.uk/lifestyle/2012/11/08/the-students-guide-to-gold-digging-part-1/", 
            "type": "article", 
            "title": "A Student’s Guide to GOLD-DIGGING: Part 1"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152264160565383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-10T22:18:59+0000", 
        "end_time": "2012-11-10T22:18:59+0000", 
        "publish_time": "2012-11-10T22:18:59+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "137881086359855", 
            "url": "http://sotontab.co.uk/headline/2012/11/10/supporting-local-talent-underplay-at-the-railway/", 
            "type": "article", 
            "title": "Supporting Local Talent: UNDERPLAY at The Railway"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152251063655383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-05T22:53:18+0000", 
        "end_time": "2012-11-05T22:53:18+0000", 
        "publish_time": "2012-11-05T22:53:18+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "284206321696653", 
            "url": "http://www.welovefilm.co/news/hollywoodnews/les-miserables-reveals-two-new-posters/", 
            "type": "article", 
            "title": "Les Miserables Reveals Two New Posters - We Love Film"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152251060095383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-05T22:51:49+0000", 
        "end_time": "2012-11-05T22:51:49+0000", 
        "publish_time": "2012-11-05T22:51:49+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "106516732845751", 
            "url": "http://www.cineview.eu/nadprevarata-vsichko-nai-novo-i-interesno-za-tazgodishnite-nagradi-oskar/", 
            "type": "article", 
            "title": "“Надпреварата” – всичко най-ново и интересно за тазгодишните награди Оскар"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152245729260383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-03T21:17:35+0000", 
        "end_time": "2012-11-03T21:17:35+0000", 
        "publish_time": "2012-11-03T21:17:35+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "391701740901431", 
            "url": "http://sotontab.co.uk/degree-break/2012/10/09/freshers-ball-proposal/", 
            "type": "article", 
            "title": "Freshers Ball PROPOSAL"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152245728785383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-03T21:17:17+0000", 
        "end_time": "2012-11-03T21:17:17+0000", 
        "publish_time": "2012-11-03T21:17:17+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "128041100676947", 
            "url": "http://sotontab.co.uk/entertainment/2012/10/12/free-music-tour-hits-southampton/", 
            "type": "article", 
            "title": "FREE Music Tour Hits Southampton"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152245727970383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-03T21:16:56+0000", 
        "end_time": "2012-11-03T21:16:56+0000", 
        "publish_time": "2012-11-03T21:16:56+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "528029543893507", 
            "url": "https://sotontab.co.uk/news/2012/11/03/roosters-on-fire-2/", 
            "type": "article", 
            "title": "Roosters on FIRE"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152244659255383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-03T11:38:24+0000", 
        "end_time": "2012-11-03T11:38:24+0000", 
        "publish_time": "2012-11-03T11:38:24+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "356711524422389", 
            "url": "http://sotontab.co.uk/news/2012/11/02/fire-closes-portswood-road/", 
            "type": "article", 
            "title": "Fire Closes Portswood Road"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152244627910383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-11-03T11:11:20+0000", 
        "end_time": "2012-11-03T11:11:20+0000", 
        "publish_time": "2012-11-03T11:11:20+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "303047316475385", 
            "url": "https://sotontab.co.uk/lifestyle/2012/11/03/the-palace-of-dreams-to-the-man-of-your-dreams-in-5-easy-steps/", 
            "type": "article", 
            "title": "The Palace of Dreams to the Man of your Dreams…in 5 Easy Steps!"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152219115440383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-10-25T19:36:28+0000", 
        "end_time": "2012-10-25T19:36:28+0000", 
        "publish_time": "2012-10-25T19:36:28+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "329881983775853", 
            "url": "http://sotontab.co.uk/degree-break/2012/10/25/sleepy-snaps/", 
            "type": "article", 
            "title": "Sleepy Snaps"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152217820955383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-10-25T07:16:21+0000", 
        "end_time": "2012-10-25T07:16:21+0000", 
        "publish_time": "2012-10-25T07:16:21+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "435209399871319", 
            "url": "http://sotontab.co.uk/degree-break/2012/10/24/students-dont-know-their-sht/", 
            "type": "article", 
            "title": "Students Don’t Know Their Sh*t?"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152216463435383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-10-24T19:09:52+0000", 
        "end_time": "2012-10-24T19:09:52+0000", 
        "publish_time": "2012-10-24T19:09:52+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "199518523516255", 
            "url": "http://sotontab.co.uk/headline/2012/10/23/student-protest-is-timely-and-urgent/", 
            "type": "article", 
            "title": "Student Protest is Timely and Urgent"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152215554885383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-10-24T11:21:31+0000", 
        "end_time": "2012-10-24T11:21:31+0000", 
        "publish_time": "2012-10-24T11:21:31+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "218693958262235", 
            "url": "http://sotontab.co.uk/degree-break/2012/10/24/whatsoc-cake-decorating/", 
            "type": "article", 
            "title": "WHATSOC? Cake Decorating!"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152211427880383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-10-22T20:35:59+0000", 
        "end_time": "2012-10-22T20:35:59+0000", 
        "publish_time": "2012-10-22T20:35:59+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "418320004890243", 
            "url": "http://sotontab.co.uk/pictures/2012/10/19/review-bloc-party-at-the-guildhall/", 
            "type": "article", 
            "title": "REVIEW: Bloc Party at the Guildhall"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152208912310383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-10-21T21:40:59+0000", 
        "end_time": "2012-10-21T21:40:59+0000", 
        "publish_time": "2012-10-21T21:40:59+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "371017429645843", 
            "url": "http://sotontab.co.uk/opinion/2012/10/11/no-to-nus-doomed-from-the-start/", 
            "type": "article", 
            "title": "No to NUS Doomed from the Start?"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }, 
      {
        "id": "10152207624260383", 
        "from": {
          "name": "Chris Houghton", 
          "id": "578040382"
        }, 
        "start_time": "2012-10-21T13:26:58+0000", 
        "end_time": "2012-10-21T13:26:58+0000", 
        "publish_time": "2012-10-21T13:26:58+0000", 
        "application": {
          "name": "Social Reader", 
          "namespace": "fb_social_reader", 
          "id": "249444298473440"
        }, 
        "data": {
          "article": {
            "id": "165689946903176", 
            "url": "https://sotontab.co.uk/news/2012/10/19/greyhound-to-be-put-down/", 
            "type": "article", 
            "title": "Greyhound to be Put Down"
          }
        }, 
        "type": "news.reads", 
        "no_feed_story": false, 
        "likes": {
          "count": 0, 
          "can_like": true, 
          "user_likes": false
        }, 
        "comments": {
          "count": 0, 
          "can_comment": true
        }
      }
    ], 
    "paging": {
      "next": "https://graph.facebook.com/578040382/news.reads?limit=25&offset=25&__after_id=10152207624260383"
    }

  };	

  return SampleData;

});
/**
 * @license RequireJS text 2.0.3 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require: false, XMLHttpRequest: false, ActiveXObject: false,
  define: false, window: false, process: false, Packages: false,
  java: false, location: false */

define('text',['module'], function (module) {
    

    var text, fs,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.3',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var strip = false, index = name.indexOf("."),
                modName = name.substring(0, index),
                ext = name.substring(index + 1, name.length);

            index = ext.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = ext.substring(index + 1, ext.length);
                strip = strip === "strip";
                ext = ext.substring(0, index);
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + '.' +
                                     parsed.ext) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback) {
            var xhr = text.createXhr();
            xhr.open('GET', url, true);

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    }

    return text;
});

define('text!app/html/lightbox.html',[],function () { return '<h3>Recent activity</h3>\n<a id=\'sr_close_lightbox\'>Close</a>\n<div id=\'sr_loading\'>\n  <img src=\'<%= site.plugin_url %>/images/ajax-loader.gif\' alt=\'Loading...\'>\n</div>\n<ul id=\'sr_activity_tabs\'>\n  <li id=\'sr_lightbox_everyone\' class=\'sr_active_tab\'><a>Everyone</a></li>\n  <li id=\'sr_lightbox_me\'><a>Just you</a></li>\n</ul>\n<div id=\'sr_reads_list\'>\n  <ul>\n  </ul>\n  <div id=\'sr_reads_empty\'>\n    None of your friends have read anything on this site yet.\n  </div>\n</div>';});

define('text!app/html/lightbox-read.html',[],function () { return '<% \n  if (read.from.id === window._sr.user.id) {\n    story_type = \'sr_me_story\';\n  } else {\n    story_type = \'sr_friend_story\';\n  }\n%>\n\n<li id=\'sr_read_<%= read.id %>\' class=\'<%= story_type %>\'>\n  <a class=\'name\' href=\'//facebook.com/<%= read.from.id %>\' target=\'blank\'>\n    <img class=\'story-img\' src=\'https://graph.facebook.com/<%= read.from.id. %>/picture\' width=\'50\' height=\'50\' alt=\'<%= read.from.name %>\'/>\n  </a>\n<div class=\'story-inner\'>\n  <div class=\'story-title\'>\n    <a class=\'name\' href=\'//facebook.com/profile.php?id=<%= read.from.id %>\' target=\'blank\'><%= read.from.name %></a> \n    read \n    <a class=\'article\' href=\'<%= read.data.article.url %>\' target=\'blank\'><%= read.data.article.title %></a>\n  </div>\n  <div class=\'story-meta\'><%= read.relative_time %> <span class=\'sr_story_delete_text\'>&middot; <a class=\'sr_story_delete\'>Delete</a></span>\n  </div>\n</div>\n<div class=\'sr_clear\'>\n</div>\n</li>';});

define('app/controllers/lightbox',['require','app/helpers/debugger','app/models/fb','app/helpers/time','app/models/analytics','app/helpers/sample-data','underscore','text!app/html/lightbox.html','text!app/html/lightbox-read.html'],function(require) {

  var Debugger         = require('app/helpers/debugger');
  var Fb               = require('app/models/fb');
  var Time             = require('app/helpers/time');
  var Analytics        = require('app/models/analytics');
  var SampleData       = require('app/helpers/sample-data');
  var _                = require('underscore');

  var LightboxHtml     = require('text!app/html/lightbox.html');
  var LightboxReadHtml = require('text!app/html/lightbox-read.html');


	var Lightbox = {};

  Lightbox.load = function() {
    var user = window._sr.user, site = window._sr.site, friends = window._sr.friends, activity = window._sr.activity;
    Debugger.log('Loading the lightbox', 0);
    if (!user) {
      Debugger.log("User is not logged in, don't load it");
      Debugger.log('Finished');
      return false;
    }
    Debugger.log('Prepending lightbox to <body>');
    $('<div/>', {
      id: 'sr_lightbox',
      html: "<div id='sr_lightbox_inner'></div>"
    }).prependTo('body');
    if ($('#sr_lightbox_inner').length !== 0) {
      Debugger.log("Lightbox added: SUCCESS");
    } else {
      Debugger.log("Lightbox added: FAILURE");
    }
    return Debugger.log('Finished');
  };

  Lightbox.setup_listeners = function() {
    var _this = this;
    Debugger.log('Setup jQuery listener for close lightbox link click');
    $('a#sr_close_lightbox').live('click', function() {
      return _this.close();
    });
  };

  Lightbox.show = function(type, User) {
    var _this = this;
    Debugger.log('Fade in lightbox', 0);
    Debugger.log('Fading');
    return $('#sr_lightbox').fadeIn('fast', function() {
      _this.show_activity(type, User);
      _this.setup_listeners();
      Analytics.setup_listeners('lightbox');
    });
  };

  Lightbox.close = function() {
    if (this.closing === true) return;
    this.closing = true;
    var _this = this;
    Debugger.log('Closing lightbox', 0);
    Debugger.log('Fading out');
    return $('#sr_lightbox').fadeOut(function() {
      $('#sr_lightbox #sr_lightbox_inner').html('');
      Debugger.log('Html lightbox inner set to blank');
      Debugger.log('Finished');
      delete _this.closing;
    });
  };

  Lightbox.show_activity = function() {
    var _this = this;
    var lightbox_template = _.template(LightboxHtml);
    var lightbox_html = lightbox_template(window._sr);
    $('#sr_lightbox_inner').html(lightbox_html);
      Debugger.log("Putting reads into the lightbox", 0);
      var reads;
      if (SampleData.is_on()) {
        reads = SampleData.reads;
      } else {
        reads = Fb.group_reads(window._sr.activity.reads);
        console.log(reads);
      }
      $('#sr_loading').hide();
      if (!reads || !reads.length) {
        Debugger.log('No reads found');
        $('#sr_reads_list').show();
        $('#sr_reads_list #sr_reads_empty').show();
      } else {
        Debugger.log("Found " + reads.length + " reads");
        var html = '';
        var read_template = _.template(LightboxReadHtml);
        _.each(reads, function(read) {
          if (!read.data || !read.data.article || !read.publish_time) {
            return;
          }
          read.relative_time = Time.relative(read.publish_time);
          html += read_template(read);
        });
        $('#sr_reads_list ul').html(html);
        Debugger.log('Html put: SUCCESS');
        Debugger.log('Showing stuff');
        $('#sr_activity_tabs').show();
        $('#sr_reads_list').show();
        Debugger.log('Adding jQuery listener for filter tabs');
        $("#sr_activity_tabs a").on("click", function() {
          Debugger.log('Lightbox activity tab click detected', 0);
          $('#sr_activity_tabs li').removeClass('sr_active_tab');
          Debugger.log('Removed class from existing tab');
          $(this).closest('li').addClass('sr_active_tab');
          Debugger.log('Added class to the clicked tab');
          if ($(this).closest('li').attr('id') === 'sr_lightbox_everyone') {
            Debugger.log('Everyone tab detected, show all stories');
            $('#sr_reads_list ul li').show();
          } else if ($(this).closest('li').attr('id') === 'sr_lightbox_me') {
            Debugger.log('Me tab detected, just show my stories');
            $('#sr_reads_list ul li.sr_friend_story').hide();
          }
          return Debugger.log('Finished');
        });
        Debugger.log('Adding jQuery listener for deleting reads');
        $('.sr_story_delete').on("click", function() {
          var read_id;
          read_id = $(this).closest('li').attr('id').replace('sr_read_', '');
          return Fb.delete_read(read_id, function(cb) {
            return $("#sr_read_"+read_id).fadeOut(function() {
              return $("#sr_read_"+read_id).remove();
            });
          });
        });
        return Debugger.log('Finished');
             
      }

  };

  return Lightbox;

});
define('text!app/html/sidebar-logged-in.html',[],function () { return '<div id=\'sr_sidebar_logged_in\'>\n  <a id=\'sr_sidebar_img\' target=\'blank\' href=\'<%= user.link %>\'><img src=\'<%= user.picture %>\' width=\'50\' height=\'50\' alt=\'<%= user.name %>\'/></a>\n  <div id=\'sr_sidebar_right\'>\n    <div id=\'sr_sidebar_name\'>\n      <a target=\'blank\' href="<%= user.link %>" ><%= user.name %></a>\n    </div>\n    <div id=\'sr_sidebar_promo\'><%= site.login_meta %></div>\n    <div id=\'sr_sidebar_logout\'><a><%= site.logout %></a></div>\n  </div>\n  <div class=\'clear\'>\n  </div>\n  <div id=\'sr_sidebar_bottom\'>\n    <% if (user.is_auto_sharing) { %>\n      <div class=\'sr_sidebar_toggle sr_sidebar_toggled_on\'>\n        <a title=\'Auto sharing to Facebook is enabled\'><%= site.auto_sharing_on %></a>\n      </div>\n    <% } else { %>\n      <div class=\'sr_sidebar_toggle sr_sidebar_toggled_off\'>\n        <a title=\'Auto sharing to Facebook is disabled\'><%= site.auto_sharing_off %></a>\n      </div>\n    <% } %>\n    <div id=\'sr_sidebar_activity\'>\n      <a><%= site.activity %></a>\n    </div>\n  </div>\n</div>';});

define('text!app/html/sidebar-logged-out.html',[],function () { return '<div id=\'sr_sidebar_logged_out\'>\n  <p><%= site.login_promo %></p>\n  <a id=\'sr_sidebar_login\'><img src=\'<%= site.plugin_url %>/images/facebooklogin.jpg\' width=\'180\' height=\'40\'/></a>\n</div>';});

define('app/controllers/sidebar',['require','app/helpers/debugger','app/models/user','app/controllers/lightbox','app/models/analytics','underscore','text!app/html/sidebar-logged-in.html','text!app/html/sidebar-logged-out.html'],function(require) {

  var Debugger    = require('app/helpers/debugger');
  var User        = require('app/models/user');
  var Lightbox    = require('app/controllers/lightbox');
  var Analytics   = require('app/models/analytics');
  var _           = require('underscore');

  var SidebarHtmlLoggedIn = require('text!app/html/sidebar-logged-in.html');
  var SidebarHtmlLoggedOut = require('text!app/html/sidebar-logged-out.html');


	var Sidebar = {};

  Sidebar.load = function() {
    var toggled_class, _this = this, user = window._sr.user, site = window._sr.site;
    if ($('#sr_sidebar_box').length === 0) {
      Debugger.log('#sr_sidebar_box is not found, cannot load sidebar.');
      return false;
    }
    Debugger.log("Loading the sidebar", 0);
    if (user) {
      if (user.is_auto_sharing === true) {
        toggled_class = 'sr_sidebar_toggled_on';
      } else {
        toggled_class = 'sr_sidebar_toggled_off';
      }
      Debugger.log("User auto-sharing is set to: " + user.is_auto_sharing);
      Debugger.log('Putting html');
      var logged_in_template = _.template(SidebarHtmlLoggedIn);
      var html = logged_in_template(window._sr);
      $('#sr_sidebar_box').html(html);
      if ($('#sr_sidebar_box').html() !== '') {
        Debugger.log("Html put: SUCCESS");
        $('#sr_sidebar_box').fadeIn(function() {
          _this.setup_logged_in_listeners();
          Analytics.setup_listeners('sidebar_logged_in');
          Debugger.log('Finished');
        });
      } else {
        Debugger.log("Html put: FAILURE");
      }
    } else {
      Debugger.log('User is not logged in, show login button');
      Debugger.log('Putting html');
      var logged_out_template = _.template(SidebarHtmlLoggedOut);
      var logged_out_html = logged_out_template(window._sr);
      $('#sr_sidebar_box').html(logged_out_html);
      if ($('#sr_sidebar_box').html() !== '') {
        Debugger.log("Html put: SUCCESS");
        $('#sr_sidebar_box').fadeIn(function() {
          Debugger.log('Adding jQuery listener for login button click');
          _this.setup_logged_out_listeners();
          Analytics.setup_listeners('sidebar_logged_out');
          Debugger.log('Finished');
        });
      } else {
        Debugger.log("Html put: FAILURE");
      }
     
    }
  };

  Sidebar.setup_logged_in_listeners = function() {
    var _this = this;
    Debugger.log("Setup jQuery listener for toggle auto-sharing link click");
    $("#sr_sidebar_box .sr_sidebar_toggle").on("click", function() {
      _this.toggle_auto_sharing($(this));
    });
    Debugger.log("Setup jQuery listener activity link click");
    $("#sr_sidebar_box #sr_sidebar_activity").on("click", function() {
      Lightbox.show('all_activity', User);
    });
    Debugger.log('Setup jQuery listener for logout link click');
    $('#sr_sidebar_box #sr_sidebar_logout').on("click", function() {
      User.logout();
    });
  };

  Sidebar.setup_logged_out_listeners = function() {
    $('#sr_sidebar_box #sr_sidebar_login').on("click", function() {
      $(this).css('opacity', 0.7);
      User.login();
    });
  };

  Sidebar.toggle_auto_sharing = function(obj) {
    if (obj.attr('class').match(/sr_sidebar_toggled_on/)) {
      obj.removeClass('sr_sidebar_toggled_on');
      obj.addClass('sr_sidebar_toggled_off');
      User.set_auto_sharing(false);
    } else if (obj.attr('class').match(/sr_sidebar_toggled_off/)) {
      obj.removeClass('sr_sidebar_toggled_off');
      obj.addClass('sr_sidebar_toggled_on');
      User.set_auto_sharing(true);
    }
  };

  return Sidebar;

});
define('app/helpers/single-format',['require', 'underscore'], function(require, _) {

	var Format = {};

	Format.names_list = function(user, reads) {

		var _this = this;
		this.user = user;
		reads = this.check(reads, user);
		this.reads = reads;
		count = this.reads.length;

		// Set up html
		var html = '';
		html += '<div class="sr_read_names">';
		if (count === 0) {
			html += 'None of your friends have read this yet';
		} else if (count === 1) {
			html += this.name(reads[0], user)+' read this';
		} else if (count === 2) {
			html += this.name(reads[0], user)+' and '+this.name(reads[1], user)+' read this';
		} else if (count === 3) {
			html += this.name(reads[0], user)+ ', ';
			html += this.name(reads[1], user)+' and ';
			html += this.name(reads[2], user)+' read this';
		} else {
			html += this.name(reads[0], user)+', ';
			html += this.name(reads[1], user)+' and ';
			html += (count-2) + ' others read this';
		}
		html += '</div>';
		return html;

	};

	Format.name = function(read, user) {
		if (!read.from || !read.from.id || !read.from.name || !user.id) {
			return '';
		}
		if (read.from.id === user.id) {
			return 'You';
		} else {
			return '<a target="blank" href="//facebook.com/'+read.from.id+'">'+read.from.name+'</a>';
		}
	};

	Format.thumbs_list = function(user, reads) {
		reads = this.check(reads, user);
		var html = '';
		html += '<div class="sr_read_thumbs">';
		_.each(reads, function(read) {
			html += '<a target="blank" href="//facebook.com/'+read.from.id+'" title="'+read.from.name+'">';
			html += "<img src='//graph.facebook.com/" + read.from.id + "/picture' width='35' height='35' alt='"+read.from.name+"' />";
			html += '</a>';
		});
		html += '</div>';
		return html;
	};

	Format.check = function(reads, user) {
		var unique = [];	// Make sure every user is unique
		reads = _.filter(reads, function(read) {
			if (_.indexOf(unique, read.from.id) === -1) {
				unique.push(read.from.id);
				return true;
			}
		});
		reads = _.sortBy(reads, function(read) { // If you read it, make sure you're at the front of the array
			if (read.from.id == user.id) {
				return 1;
			} else {
				return 2;
			}
		});
		return reads;
	};

	return Format;

});
define('app/controllers/single',['require','underscore','app/helpers/debugger','app/helpers/single-format','app/models/analytics','app/helpers/sample-data'],function(require) {

  var _          = require('underscore');
  var Debugger   = require('app/helpers/debugger');
  var Format     = require('app/helpers/single-format');
  var Analytics  = require('app/models/analytics');
  var SampleData = require('app/helpers/sample-data');


	var Single = {};

  Single.load = function() {
    var user = window._sr.user, activity = window._sr.activity;
    if (!user) return;
    Debugger.log('Loading friends who read this widget', 0);
    if ($('#sr_friends_single').length === 0) {
      Debugger.log('#sr_friends_single not found, cannot load');
    } else {
      Debugger.log('#sr_friends_single found, start loading');
      var reads;
      if (SampleData.is_on()) {
        reads = SampleData.reads.data;
      } else {
        if (!activity.reads) {
          Debugger.log('No reads found');
          Debugger.log('Finished');
          return;
        }
        reads = activity.reads;
      }
      var single_reads = _.filter(reads, function(read) {
        var regex = new RegExp(window.location.pathname,"gi");
        if (!read.data || !read.data.article || !read.data.article.url) {
          return false;
        }
        if (regex.test(read.data.article.url)) {
          return true;
        }
      });
      Debugger.log('Creating the names list html string');
      var names_str = Format.names_list(user, single_reads);
      Debugger.log('Creating the thumbs list html string');
      var images_str = Format.thumbs_list(user, single_reads);
      var html = names_str + images_str;
      Debugger.log('Fading in');
      $('#sr_friends_single').html(html).fadeIn(function() {
        Analytics.setup_listeners('frs_single');
        Debugger.log('Finished');
      });
    }
  };

  return Single;

});
define('app/main',['require','app/tests/main','app/models/user','app/models/analytics','app/controllers/sidebar','app/controllers/lightbox','app/controllers/single'],function (require) {

	var Tests = require('app/tests/main');
	var User = require('app/models/user');
	var Analytics = require('app/models/analytics');
	var Sidebar = require('app/controllers/sidebar');
	var Lightbox = require('app/controllers/lightbox');
	var Single = require('app/controllers/single');

	window.$ = window.jQuery;

	// jQuery should be in as a WP dependency already
	window.$(document).ready(function() {
		if (Tests.are_on()) {
			Tests.start();
		} else {
			User.init(function() {
				Sidebar.load();
			}, function() {
				Lightbox.load();
				Single.load();
				Analytics.init();
			});
		}
	});
});
// For any third party dependencies, like jQuery, place them in the lib folder.

// Get absolute directory
var appUrl = require.toUrl('app');
var arr = appUrl.split('/');
arr.pop();
var dir = arr.join('/');

// Configure loading modules from the lib directory,
// except for 'app' ones, which are in a sibling
// directory.
requirejs.config({
    baseUrl: dir+'/lib',
    paths: {
        app: dir+'/app',
        underscore: dir+'/lib/underscore.min',
        ga: 'https://google-analytics.com/ga',
        text: dir+'/lib/text'
    }
});

// Start loading the main app file. Put all of
// your application logic in there.
requirejs(['app/main']);

define("app", function(){});
