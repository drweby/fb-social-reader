
define('app/helpers/debugger',[],function() {

  var Debugger = {};

  Debugger.start = function() {
    if (this.check_parameter_exists('sr_debug')) {
      this.debug_mode = true;
      return console.log("***********************************************\n* Welcome to the Social Reader debug console! *\n***********************************************");
    } else {
      return this.debug_mode = false;
    }
  };

  Debugger.log = function(message, indent) {
    if (indent == null) {
      indent = 1;
    }
    if (this.debug_mode === true) {
      if (indent === 1) {
        return console.log("  * " + message);
      } else if (indent === 0) {
        return console.log("\n" + message + ":");
      }
    } else {

    }
  };

  Debugger.check_parameter_exists = function(parameter) {
    var currentParameter, fullQString, i, paramArray, paramCount, queryStringComplete;
    fullQString = window.location.search.substring(1);
    paramCount = 0;
    queryStringComplete = "?";
    if (fullQString.length > 0) {
      paramArray = fullQString.split("&");
      i = 0;
      while (i < paramArray.length) {
        currentParameter = paramArray[i].split("=");
        if (currentParameter[0] === parameter) {
          return true;
        }
        i++;
      }
    }
    return false;
  };

  // Start the debugger and return
  Debugger.start();
  return Debugger;

});   



define('app/helpers/cookie',['require'], function() {

  var Cookie = {};


  Cookie.set = function(c_name, value, exdays) {
    var c_value, exdate;
    exdate = new Date();
    exdate.setDate(exdate.getDate() + exdays);
    c_value = escape(value) + (!(exdays != null) ? "" : "; expires=" + exdate.toUTCString());
    return document.cookie = c_name + "=" + c_value;
  };

  Cookie.get = function(c_name) {
    var ARRcookies, i, x, y;
    ARRcookies = document.cookie.split(";");
    i = 0;
    while (i < ARRcookies.length) {
      x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
      y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
      x = x.replace(/^\s+|\s+$/g, "");
      if (x === c_name) {
        return unescape(y);
      }
      i++;
    }
  };

  Cookie.exists = function(c_name) {
    var cookie = this.get(c_name);
    if (cookie !== null) {
      return true;
    } else {
      return false;
    }
  };

  Cookie.remove = function(c_name) {
    return document.cookie = c_name + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
  };

  return Cookie;


});
    
define('app/models/cache',['require', 'app/helpers/debugger', 'app/helpers/cookie'], function(require, Debugger, Cookie) {

  var Cache = {};

  Cache.save = function(user_id, field, data, cb) {
    Debugger.log('Saving '+field+' to the database cache', 0);
    var _this = this;
    var json = JSON.stringify(data);
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "save_cache",
      fb_id: user_id,
      field: field,
      data: json
    }, function(data) {
      Debugger.log('Ajax request complete');
      if (data == '1') {
        Debugger.log(field+' saved successfully');
        Cookie.set('sr_'+field, 'true', null);
        Debugger.log('Set cookie marking '+field+' as saved this session');
        Debugger.log('Finished');
        if (cb !== null) cb();
      } else {
        Debugger.log('Data failed to save');
        Debugger.log('Finished');
        if (cb !== null) cb();
      }
    });
  };

  Cache.get = function(user_id, field, cb) {
    var _this = this;
    Debugger.log('Getting the '+field);
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "get_cache",
      fb_id: user_id,
      field: field
    }, function(data) {
      Debugger.log('Ajax request complete');
      Debugger.log('Converting data to json object');
      try {
        var parsed = JSON.parse(data);
        Debugger.log('JSON parsed: SUCCESS');
        Debugger.log('Finished');
        if (cb !== null) cb(parsed);
      }
      catch(e) {
        Debugger.log('JSON parsed: FAILURE');
        Debugger.log('Finished');
        if (cb !== null) cb();
      }
    });
  };

  return Cache;

});
define('app/models/fb',['require', 'app/helpers/debugger', 'app/helpers/cookie', 'app/models/cache'], function(require, Debugger, Cookie, Cache) {

	var Fb = {
		user: {},
		friends: [],
		activity: {}
	};

  Fb.init = function(app_id, cb) {

    var _this = this;
    Debugger.log('Initiliazing Facebook', 0);
    $('body').prepend('<div id="fb-root"></div>');
    Debugger.log('Prepended div fb-root to body');
    window.fbAsyncInit = function() {
      Debugger.log("Loading the SDK asynchronously with app id: " + app_id);
      FB.init({
        appId: app_id,
        channelUrl: "//localhost:8888/wordpress/channel.html",
        status: true,
        cookie: true,
        xfbml: true
      });
      Debugger.log('SDK loaded');
      Debugger.log('Finished');
      return cb();
    };
    return (function(d, debug) {
      var id, js, ref;
      js = void 0;
      id = "facebook-jssdk";
      ref = d.getElementsByTagName("script")[0];
      if (d.getElementById(id)) {
        return;
      }
      js = d.createElement("script");
      js.id = id;
      js.async = true;
      js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
      return ref.parentNode.insertBefore(js, ref);
    })(window.document, false);
  };

	Fb.is_logged_in = function(cb) {
    var _this = this;
    Debugger.log('See if user is logged in to Facebook and the app', 0);
    Debugger.log('Query Facebook');
    return FB.getLoginStatus(function(response) {
      Debugger.log('Response from Facebook received');
      if (response.status === 'connected') {
        Debugger.log('User is logged in');
        _this.user.logged_in = true;
        Debugger.log('Finished');
        return cb(true);
      } else {
        Debugger.log('User is not logged in');
        _this.user.logged_in = false;
        Debugger.log('Finished');
        return cb(false);
      }
    });
  };

  Fb.get_user = function(cb) {
    var _this = this;
    Debugger.log('Get Facebook user', 0);
    Debugger.log('Querying Facebook');
    return FB.api('/me', function(me) {
      Debugger.log('Response received, setting values');
      _this.user.id = me.id;
      _this.user.name = me.name;
      _this.user.link = me.link;
      _this.user.picture = "//graph.facebook.com/" + me.id + "/picture";
      Debugger.log('Finished');
      return cb(_this.user);
    });
  };


  Fb.login = function(cb) {
    var _this = this;
    Debugger.log('Logging in the user to Facebook', 0);
    return FB.login((function(response) {
      Debugger.log('Response received from Facebook');
      if (response.status === 'connected') {
        Debugger.log('Logged in successfully');
        cb();
      } else {
        return Debugger.log("User cancelled login or did not fully authorize.");
      }
    }), {
      scope: "publish_actions"
    });
  };

  Fb.logout = function(cb) {
    var _this = this;
    Debugger.log('Logging the user out of Facebook', 0);
    return FB.logout(function(response) {
      Debugger.log('Logout successful');
      Debugger.log('Removing cached coookie NEED TO DO THIS');
      Debugger.log('Reloading the page');
      cb();
    });
  };

  Fb.add_read = function(cb) {
    var _this = this;
    Debugger.log('Adding user read', 0);
    return FB.api("/me/news.reads?article=" + document.URL, "post", function(response) {
      Debugger.log('Response received from Facebook');
      if (response.id) {
        Debugger.log("Read " + response.id + " posted to Facebook: SUCCESS");
      } else {
        Debugger.log("Read posted to Facebook: FAILURE");
        Debugger.log("Error message from Facebook: " + response.error.message + " ");
      }
      Debugger.log('Finished');
      if (cb !== null) {
        return cb();
      }
    });
  };

  Fb.delete_read = function(id, cb) {
    var _this = this;
    Debugger.log('Deleting user read', 0);
    return FB.api("/" + id, "delete", function(response) {
      Debugger.log('Response received from Facebook');
      if (response === true) {
        Debugger.log('Read deleted from Facebook: SUCCESS');
      } else {
        Debugger.log('Read deleted from Facebook: FAILURE');
        Debugger.log('Error message from Facebook: #{response.error.message}');
      }
      return cb();
    });
  };

  Fb.get_friend_users = function(cb) {
    var _this = this;
    Debugger.log('Get Facebook friends using the app', 0);
    if (Cookie.exists('sr_friends_cache')) {
      Debugger.log('Friends in cache, get from server');
      Cache.get(_this.user.id, 'friends_cache', function(response) {
        _this.friends = response;
        if (cb !== null) cb(_this.friends);
      });
    } else {
      Debugger.log('Friends not in cache, querying Facebook');
      return FB.api('/me/friends?fields=name,installed', function(response) {
        var friend, _i, _len, _ref;
        Debugger.log('Response received, finding friend users');
        _ref = response.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          friend = _ref[_i];
          if (friend.installed === true) {
            delete friend.installed;
            _this.friends.push(friend);
          }
        }
        Debugger.log("" + _this.friends.length + " friends found");
        Debugger.log('Finished');
				Cache.save(_this.user.id, 'friends_cache', _this.friends, function() {
          cb(_this.friends);
        });
      });
    }
  };

  Fb.get_activity = function(cb) {
    var batch_arr, user, _i, _len, _ref,
    _this = this;
    Debugger.log('Getting activity of you and friends', 0);
    if (Cookie.exists('sr_activity_cache')) {
      Debugger.log('Activity in cache, get from server');
      Cache.get(_this.user.id, 'activity_cache', function(response) {
        _this.activity = response;
        if (cb !== null) cb(_this.activity);
      });
    } else {
      Debugger.log('Activity reads does not exist, create and fetch from Facebook');
      this.activity.reads = [];
      Debugger.log('Creating batch array');
      batch_arr = [];
      batch_arr.push({
        method: "GET",
        relative_url: "me/news.reads?fields=id,comment_info,comments,comment_info,likes,like_info,data,publish_time,from"
      });
      _ref = this.friends;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        batch_arr.push({
          method: "GET",
          relative_url: "" + user.id + "/news.reads?fields=id,comment_info,comments,comment_info,likes,like_info,data,publish_time,from"
        });
      }
      Debugger.log("Starting batch requests for the " + this.friends.length + " friends using this app");
      return FB.api("/", "POST", {
        batch: batch_arr
      }, function(responses) {
        var body, read, response, _j, _k, _len1, _len2, _ref1;
        Debugger.log('Response received from Facebook');
        Debugger.log('Added reads to reads param array');
        for (_j = 0, _len1 = responses.length; _j < _len1; _j++) {
          response = responses[_j];
          if (!response || !response.body) continue;
          body = JSON.parse(response.body);
          _ref1 = body.data;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            read = _ref1[_k];
            _this.activity.reads.push(read);
          }
        }
        Debugger.log('Sorting the reads by publish_time descending');
        _this.activity.reads = _this.activity.reads.sort(function(a, b) {
          a = new Date(a.publish_time);
          b = new Date(b.publish_time);
          return a>b ? -1 : a<b ? 1 : 0;
        });
        Debugger.log('Finished');
        Cache.save(_this.user.id, 'activity_cache', _this.activity, function() {
          cb();
        });
      });
    }
  };

  return Fb;


});
define('app/models/user',['require', 'app/models/fb', 'app/helpers/cookie', 'app/helpers/debugger'], function(require, Fb, Cookie, Debugger) {

  var $ = jQuery;

  var User = {};

  User.init = function(cb1, cb2) {
    var _this = this;
    this.site = {};
    this.user = {};
    this.friends = [];
    this.activity = {};

    this.get_client_details(function() {
      Fb.init(_this.site.fb_app_id, function() {
        Fb.is_logged_in(function(bool) {
          if (bool === true) {
            Fb.get_user(function(user) {
              _this.user = user;
              _this.user.logged_in = bool;
              _this.is_auto_sharing(function() {
                cb1();
                Fb.get_friend_users(function(friends) {
                  _this.friends = friends;
                  Fb.get_activity(function(activity) {
                    _this.activity = activity;
                    cb2();
                  });
                });
              });
            });
          } else {
            return cb1();
          }
        });
      });
    });
  };

  User.get_client_details = function(cb) {
    var _this = this;
    Debugger.log('Getting client site details', 0);
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "get_client_details"
    }, function(data) {
      Debugger.log('Ajax request complete');
      _this.site = JSON.parse(data);
      if (_this.site) {
        Debugger.log('Read from ajax request data: SUCCESS');
      } else {
        Debugger.log('Read from ajax request data: FAILURE');
      }
      Debugger.log('Finished');
      return cb();
    });
  };


  User.is_auto_sharing = function(cb) {
    var _this = this;
    Debugger.log("See if we're auto sharing");
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "is_auto_sharing",
      fb_id: this.user.id
    }, function(data) {
      Debugger.log('Ajax request complete');
      if (data == 1 || data == 0) {
        Debugger.log('SUCCESS, set param');
        if (data == 1) {
          data = true;
        } else {
          data = false;
        }
        _this.user.auto_sharing = data;
        Debugger.log('Finished');
      } else {
        Debugger.log('Data format is incorrect. FAILURE');
        console.log(data);
      }
      return cb();
    });
  };

  User.set_auto_sharing = function(bool) {
    var _this = this;
    Debugger.log('Setting auto sharing', 0);
    Debugger.log("Changing auto sharing to " + bool);
    return $.post(_sr_ajax.ajaxurl, {
      action: "_sr_ajax_hook",
      type: "set_auto_sharing",
      fb_id: this.user.id,
      is_auto_sharing: bool
    }, function(data) {
      Debugger.log('Ajax request complete');
      if (data == 1) {
        Debugger.log('Auto sharing change: SUCCESS');
      } else {
        Debugger.log('Auto sharing change: FAILURE');
      }
      Debugger.log('Finished');
    });
  };

  User.login = function() {
    Fb.login(function() {
      window.location.reload();
    });
  };

  User.logout = function() {
    Fb.logout(function() {
      Cookie.remove('sr_activity_cache');
      Cookie.remove('sr_friends_cache');
      window.location.reload();
    });
  };



  return User;



});

define('app/helpers/time',[],function() {

  var Time = {};

  Time.relative = function(time) {
    var elapsed, msPerDay, msPerHour, msPerMinute, msPerMonth, msPerYear, timestamp;
    timestamp = new Date(fb_time).getTime();
    msPerMinute = 60 * 1000;
    msPerHour = msPerMinute * 60;
    msPerDay = msPerHour * 24;
    msPerMonth = msPerDay * 30;
    msPerYear = msPerDay * 365;
    elapsed = new Date().getTime() - timestamp;
    if (elapsed < msPerMinute) {
      return Math.round(elapsed / 1000) + " seconds ago";
    } else if (elapsed < msPerHour) {
      return Math.round(elapsed / msPerMinute) + " minutes ago";
    } else if (elapsed < msPerDay) {
      return Math.round(elapsed / msPerHour) + " hours ago";
    } else if (elapsed < msPerMonth) {
      return Math.round(elapsed / msPerDay) + " days ago";
    } else if (elapsed < msPerYear) {
      return Math.round(elapsed / msPerMonth) + " months ago";
    } else {
      return Math.round(elapsed / msPerYear) + " years ago";
    }
  };

  return Time;

});
define('app/controllers/lightbox',['require', 'app/helpers/debugger', 'app/models/user', 'app/helpers/time'], function(require, Debugger, Fb, Time) {

	var Lightbox = {};

  Lightbox.load = function(user, site) {
    this.user = user;
    this.site = site;
    var _this = this;
    Debugger.log('Loading the lightbox', 0);
    if (user.logged_in === false) {
      Debugger.log("User is not logged in, don't load it");
      Debugger.log('Finished');
      return false;
    }
    Debugger.log('Prepending lightbox to <body>');
    $('<div/>', {
      id: 'sr_lightbox',
      html: "<div id='sr_lightbox_inner'></div>"
    }).prependTo('body');
    if ($('#sr_lightbox_inner').length !== 0) {
      Debugger.log("Lightbox added: SUCCESS");
    } else {
      Debugger.log("Lightbox added: FAILURE");
    }
    this.setup_listeners();
    return Debugger.log('Finished');
  };

  Lightbox.setup_listeners = function() {
    var _this = this;
    Debugger.log('Setup jQuery listener for close lightbox link click');
    $('a#sr_close_lightbox').live('click', function() {
      return _this.close();
    });
  };

  Lightbox.show = function(type, User) {
    var _this = this;
    Debugger.log('Fade in lightbox', 0);
    Debugger.log('Fading');
    return $('#sr_lightbox').fadeIn('fast', function() {
      Debugger.log('Finished');
      return _this.show_activity(type, User);
    });
  };

  Lightbox.close = function() {
    var _this = this;
    Debugger.log('Closing lightbox', 0);
    Debugger.log('Fading out');
    return $('#sr_lightbox').fadeOut(function() {
      $('#sr_lightbox #sr_lightbox_inner').html('');
      Debugger.log('Html lightbox inner set to blank');
      return Debugger.log('Finished');
    });
  };

  Lightbox.show_activity = function(type, User) {
    var _this = this;
    $('#sr_lightbox_inner').html("			<h3>Recent activity</h3>			<a id='sr_close_lightbox'>Close</a>			<div id='sr_loading'><img src='" + this.site.plugin_url + "/images/ajax-loader.gif' alt='Loading...'></div>			<ul id='sr_activity_tabs'>				<li id='sr_lightbox_everyone' class='sr_active_tab'><a>Everyone</a></li>				<li id='sr_lightbox_me'><a>Just you</a></li>			</ul>			<div id='sr_reads_list'><ul></ul></div>		");
      var html, read, story_type, _i, _len, _ref;
      Debugger.log("Putting reads into the lightbox", 0);
      $('#sr_loading').hide();
      Debugger.log("Found " + User.activity.reads.length + " reads");
      html = '';
      _ref = User.activity.reads;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        read = _ref[_i];
        if (read.from.id === User.user.id) {
          story_type = 'sr_me_story';
        } else {
          story_type = 'sr_friend_story';
        }
        if (!read.data || !read.data.article) {
          continue;
        }
        html += "<li id='sr_read_" + read.id + "' class='" + story_type + "'>						<a class='name' href='//facebook.com/" + read.from.id + "' target='blank'>							<img class='story-img' src='https://graph.facebook.com/" + read.from.id + "/picture' width='50' height='50' alt='" + read.from.name + "' />						</a>						<div class='story-inner'>							<div class='story-title'>								<a class='name' href='//facebook.com/profile.php?id=" + read.from.id + "' target='blank'>									" + read.from.name + "								</a> read 								<a class='article' href='" + read.data.article.url + "' target='blank'>" + read.data.article.title + "</a>							</div>							<div class='story-meta'>								" + Time.relative(read.publish_time) + "								<span>&middot; <a class='sr_story_delete'>Delete</a></span>							</div>						</div>						<div class='sr_clear'></div>					</li>";
      }

      $('#sr_reads_list ul').html(html);
      Debugger.log('Html put: SUCCESS');
      Debugger.log('Showing stuff');
      $('#sr_activity_tabs').show();
      $('#sr_reads_list').show();
      Debugger.log('Adding jQuery listener for filter tabs');
      $("#sr_activity_tabs a").on("click", function() {
        Debugger.log('Lightbox activity tab click detected', 0);
        $('#sr_activity_tabs li').removeClass('sr_active_tab');
        Debugger.log('Removed class from existing tab');
        $(this).closest('li').addClass('sr_active_tab');
        Debugger.log('Added class to the clicked tab');
        if ($(this).closest('li').attr('id') === 'sr_lightbox_everyone') {
          Debugger.log('Everyone tab detected, show all stories');
          $('#sr_reads_list ul li').show();
        } else if ($(this).closest('li').attr('id') === 'sr_lightbox_me') {
          Debugger.log('Me tab detected, just show my stories');
          $('#sr_reads_list ul li.sr_friend_story').hide();
        }
        return Debugger.log('Finished');
      });
      Debugger.log('Adding jQuery listener for deleting reads');
      $('.sr_story_delete').on("click", function() {
        var read_id;
        read_id = $(this).closest('li').attr('id').replace('sr_read_', '');
        return _this.model.fb_delete_read(read_id, function(cb) {
          return $("#sr_read_{read_id}").fadeOut(function() {
            return $("#sr_read_{read_id}").remove();
          });
        });
      });
      return Debugger.log('Finished');
    
  };

  return Lightbox;

});
define('app/controllers/sidebar',['require', 'app/helpers/debugger', 'app/models/user', 'app/controllers/lightbox'], function(require, Debugger, User, Lightbox) {

	var Sidebar = {};

  Sidebar.load = function(user, site) {
    var toggled_class,
      _this = this;
    if ($('#sr_sidebar_box').length === 0) {
      Debugger.log('#sr_sidebar_box is not found, cannot load sidebar.');
      return false;
    }
    _this = this;
    Debugger.log("Loading the sidebar", 0);
    if (user.logged_in === true) {
      Debugger.log("User is logged in");
      if (user.auto_sharing === true) {
        toggled_class = 'sr_sidebar_toggled_on';
      } else {
        toggled_class = 'sr_sidebar_toggled_off';
      }
      Debugger.log("User auto-sharing is set to: " + user.auto_sharing);
      Debugger.log('Putting html');
      $('#sr_sidebar_box').html("       <div id='sr_sidebar_logged_in'>               <a target='blank' href='" + user.link + "'>            <img src='" + user.picture + "' width='50' height='50' alt='" + user.name + "' />         </a>          <div id='sr_sidebar_right'>           <div id='sr_sidebar_name'><a target='blank' href='" + user.link + "'>" + user.name + "</a></div>            <div id='sr_sidebar_promo'>" + site.login_meta + "</div>           <div id='sr_sidebar_logout'><a>Logout</a></div>         </div>          <div class='clear'></div>         <div id='sr_sidebar_bottom'>            <div class='sr_sidebar_toggle " + toggled_class + "'>             <a title='Auto sharing to Facebook is enabled'>" + site.auto_sharing_on + "</a>            </div>            <div id='sr_sidebar_activity'><a>" + site.activity + "</a></div>         </div>        </div>      ");
      if ($('#sr_sidebar_box').html() !== '') {
        Debugger.log("Html put: SUCCESS");
      } else {
        Debugger.log("Html put: FAILURE");
      }
      this.setup_logged_in_listeners();
    } else {
      Debugger.log('User is not logged in, show login button');
      Debugger.log('Putting html');
      $('#sr_sidebar_box').html("       <div id='sr_sidebar_logged_out'>                Login and read with your friends          <a id='sr_sidebar_login'><img src='" + site.plugin_url + "/images/facebooklogin.jpg' width='180' height='40' /></a>        </div>      ");
      if ($('#sr_sidebar_box').html() !== '') {
        Debugger.log("Html put: SUCCESS");
      } else {
        Debugger.log("Html put: FAILURE");
      }
      Debugger.log('Adding jQuery listener for login button click');
      this.setup_logged_out_listeners();
    }
  };

  Sidebar.setup_logged_in_listeners = function() {
    var _this = this;
    Debugger.log("Setup jQuery listener for toggle auto-sharing link click");
    $("#sr_sidebar_box .sr_sidebar_toggle").on("click", function() {
      _this.toggle_auto_sharing($(this));
    });
    Debugger.log("Setup jQuery listener activity link click");
    $("#sr_sidebar_box #sr_sidebar_activity").on("click", function() {
      Lightbox.show('all_activity', User);
    });
    Debugger.log('Setup jQuery listener for logout link click');
    $('#sr_sidebar_box #sr_sidebar_logout').on("click", function() {
      User.logout();
    });
    Debugger.log('Finished');
  };

  Sidebar.setup_logged_out_listeners = function() {
    $('#sr_sidebar_box #sr_sidebar_login').on("click", function() {
      $(this).css('opacity', 0.7);
      User.login();
    });
  };

  Sidebar.toggle_auto_sharing = function(obj) {
    if (obj.attr('class').match(/sr_sidebar_toggled_on/)) {
      obj.removeClass('sr_sidebar_toggled_on');
      obj.addClass('sr_sidebar_toggled_off');
      User.set_auto_sharing(false);
    } else if (obj.attr('class').match(/sr_sidebar_toggled_off/)) {
      obj.removeClass('sr_sidebar_toggled_off');
      obj.addClass('sr_sidebar_toggled_on');
      User.set_auto_sharing(true);
    }
  };

  return Sidebar;

});
define('app/main',['require', 'app/models/user', 'app/controllers/sidebar', 'app/controllers/lightbox'],
	function (require, User, Sidebar, Lightbox) {

	$ = window.jQuery;

	// jQuery should be in as a WP dependency already
	$(document).ready(function() {

		// Initialise the user and load stuff
		User.init(function() {
			Sidebar.load(User.user, User.site);
		}, function() {
			Lightbox.load(User.user, User.site);
			//window._sr.load_friends_read_single();
		});

	});

});
// For any third party dependencies, like jQuery, place them in the lib folder.

// Get absolute directory
var appUrl = require.toUrl('app');
var arr = appUrl.split('/');
arr.pop();
var dir = arr.join('/');

// Configure loading modules from the lib directory,
// except for 'app' ones, which are in a sibling
// directory.
requirejs.config({
    baseUrl: dir+'/lib',
    paths: {
        app: dir+'/app'
    }
});

// Start loading the main app file. Put all of
// your application logic in there.
requirejs(['app/main']);

define("app", function(){});
